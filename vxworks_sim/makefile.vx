################################################################################
#
# Makefile for Trima simulator control OS image
#
################################################################################

ifeq ($(BUILD_TYPE),CLEAN)
.PHONY: all
all: clean
else
.PHONY: all
all: check_opt_change vxWorks.exe
endif

#
# MAINDIR should be set to the relative path from this makefile directory
# to the base trima project directory.  MAINDIR must use \ (DOS/Windows
# style) directory separators if they are needed.
#
MAINDIR = ..

#
# Some files needed for build are in the tornado target tree
#
CONFIG_DIR = $(WIND_BASE)/target/config
CONFIG_COMMON_DIR = $(CONFIG_DIR)/comps/src
SIM_DIR = $(CONFIG_DIR)/simpc
LOCAL_CONFIG_DIR = $(MAINDIR)/config
LOCAL_CONFIG_COMMON_DIR = $(LOCAL_CONFIG_DIR)/common

vpath %.c $(CONFIG_DIR)/simpc:$(SIM_DIR):..
vpath %.c $(CONFIG_COMMON_DIR):$(SIM_DIR):..
vpath %.s $(CONFIG_COMMON_DIR):$(SIM_DIR):..
vpath %.c $(LOCAL_CONFIG_DIR):$(SIM_DIR):..
vpath %.cpp $(LOCAL_CONFIG_COMMON_DIR):$(SIM_DIR):../..

#
# vxWorks operating system build needs to override some of the flags
# provided by the common makefile templates.  Note that a trick is required
# to get white space into variables which we want defined as empty.  Without
# the white space, they will be treated as undefined by GNU make, and the
# common makefile templates will set them to their default values.
#
DBGFLAGS := $(NOSUCHVARIABLE) $(NOSUCHVARIABLE)
OPTFLAGS := $(NOSUCHVARIABLE) $(NOSUCHVARIABLE)
WARNFLAGS := $(NOSUCHVARIABLE) $(NOSUCHVARIABLE)

#
# Source for this image was originally derived from a Tornado project build
#
ADDN_CPPFLAGS = -DPRJ_BUILD -DRW_MULTI_THREAD -D_REENTRANT -DCONTROL_BUILD -DOS_BUILD
ADDN_ASFLAGS = -DPRJ_BUILD -DRW_MULTI_THREAD -D_REENTRANT -DCONTROL_BUILD -DOS_BUILD
ADDN_CCFLAGS = -DPRJ_BUILD -DRW_MULTI_THREAD -D_REENTRANT -DCONTROL_BUILD -DOS_BUILD
ADDN_CXXFLAGS = -DPRJ_BUILD -DRW_MULTI_THREAD -D_REENTRANT -DCONTROL_BUILD -DOS_BUILD

#
# Include build rules and find common project.  The common project
# location is used to generate additional include paths.
#
include $(MAINDIR)/makefile.vxc
INCDIR := $(INCDIR) -I. -I$(WIND_BASE)/target/h \
        -I$(WIND_BASE)/target/config/simpc -I$(COMDIR)/include \
        -I$(MAINDIR) -I$(MAINDIR)/os \
        -I$(WIND_BASE) -I$(MAINDIR)/trima_common \
        -I$(CONFIG_COMMON_DIR) -I$(WIND_BASE)/target/src/drv \
        -I$(LOCAL_CONFIG_DIR)

SYS_S_FILES = 
SYS_C_FILES = usrAppInit.c prjConfig.c linkSyms.c sysLib.c
# trimaOpSys.c ntEnd.c
SYS_CXX_FILES = 

#
# Need to build dependency file list for all source files
#
SYS_DEPEND := $(addprefix .dfile/, $(notdir $(SYS_CXX_FILES:.cpp=.d))) \
              $(addprefix .dfile/, $(notdir $(SYS_C_FILES:.c=.d))) \
              $(addprefix .dfile/, $(notdir $(SYS_S_FILES:.s=.d)))

PRIMARY_OBJS = $(CPU)/sysLib.o $(CPU)/usrAppInit.o $(CPU)/prjConfig.o $(CPU)/linkSyms.o

LIB_DIRS =   -L$(WIND_BASE)/target/lib/simpc/SIMNT/gnu \
             -L$(WIND_BASE)/target/lib/simpc/SIMNT/common \
             -L$(MAINDIR)/lib -L$(COMDIR)/datalog/lib \
             -L$(COMDIR)/cds/lib

LIB_LIST = -lcplus -lgnucplus -larch -lcommoncc -ldrv -lgcc \
           -lnet -los -lrpc -lusb -lwdb -lwind \
           -lwindview -lwndml -lppp
           
$(SYS_DEPEND)   : | .dfile
$(PRIMARY_OBJS) : | $(CPU)

#-ldatalog -ltrima_datalog  -ltrima_common -ltrima_common_sys  -lcontrol_reentrant -lgui -lcds 
$(CPU)/.partialImage.o : $(PRIMARY_OBJS)
	$(Q)$(LD) $(LDFLAGS) $(PRIMARY_OBJS) $(LIB_DIRS) --start-group $(LIB_LIST) --end-group -o $(CPU)/.partialImage.o

$(CPU)/.ctdt.c : $(CPU)/.partialImage.o
	$(Q)$(NM) $(CPU)/.partialImage.o | $(MUNCH) > $(CPU)/.ctdt.c

$(CPU)/.ctdt.o : $(CPU)/.ctdt.c
	$(Q)$(CC) -fdollars-in-identifiers $(CCFLAGS) $(CPU)/.ctdt.c -o $(CPU)/.ctdt.o

$(CPU)/.symTbl.c : $(CPU)/.partialImage.o
	$(Q)makeSymTbl simpc $(CPU)/.partialImage.o $(CPU)/.symTbl.c

$(CPU)/.symTbl.o : $(CPU)/.symTbl.c
	$(Q)$(CC) -fdollars-in-identifiers $(CCFLAGS) $(CPU)/.symTbl.c -o $(CPU)/.symTbl.o

vxWorks.exe : vxWorks
	$(Q)wtxtcl $(WIND_BASE)\host\x86-win32\bin\simpcToExe.tcl vxWorks

vxWorks : $(SYS_DEPEND) $(CPU)/.partialImage.o $(CPU)/.ctdt.o $(CPU)/.symTbl.o $(CPU)/dataSegPad.o
  ifeq ($(TERSE),true)
	@echo x Linking: $(BASEDIR)/$(@)
  endif
	$(Q)$(LD) --subsystem=windows -e _WinMainCRTStartup $(CPU)/dataSegPad.o $(CPU)/.partialImage.o \
        $(CPU)/.ctdt.o $(CPU)/.symTbl.o $(WIND_BASE)/host/x86-win32/i386-pc-mingw32\lib\crt1.o -o vxWorks

.PHONY: clean
clean:
	rm -f SIMNT/* .dfile/* .opt/*
	rm -f vxWorks.exe vxWorks vxWorks.exe.sym

ifneq ($(BUILD_TYPE),CLEAN)
  ifndef FORCE_REBUILD
    ifneq ($(strip $(SYS_C_FILES)),)
      -include $(addprefix .dfile/, $(notdir $(SYS_C_FILES:.c=.d)))
    endif

    ifneq ($(strip $(SYS_CXX_FILES)),)
      -include $(addprefix .dfile/, $(notdir $(SYS_CXX_FILES:.cpp=.d)))
    endif
  else
    include $(MAINDIR)/makefile.rules
  endif
endif

