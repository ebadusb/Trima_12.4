using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BCT.Device.Trima.V6_3
{
    public partial class VISIf
    {
        // Interface verion number.  Incremented when the interface changes.
        public const string VISTA_IF_VERSION_NUMBER = "Revision: 1.60";   // must be updated by hand in Perforce.  Bummer.

        // Define port that VIP_CMD listens on.
        public const int VIP_LISTEN_PORT = 7010;

        // Define the SOM value
        public const uint VIP_SOM_ID = 0xCAFEBABE;

        //typedef 
        public partial class trimaVistaHeader
        {
           public  uint         som;               // Start of Message identifier
           public int           messageType;       // Message Type
           public int           sequenceNumber;    // Number generated by Vista to correlate commands to responses
           public int           status;            // Used by Trima only.  Indicates success or failure of commands
           public int           lengthInBytes;     // Length of body message in bytes (excludes header)
           public int           timestamp;         // Time message was sent (used for recording / playback only).
           public uint          bodyCrc;           // CRC computed against entire message (header + body)
           public uint          headerCrc;         // CRC computed against message header.
        }

        public const int trimaVistaHeaderSize = 32;


        public const int VIP_OK                 =  1;
        public const int VIP_BAD_START_OF_MSG   =  2;
        public const int VIP_HEADER_CRC_INVALID =  3;
        public const int VIP_MSG_CRC_INVALID    =  4;
        public const int VIP_BAD_LENGTH         =  5;
        public const int VIP_NOT_PRIVILEGED     =  6;
        public const int VIP_PFR_NOT_COMPLETE   =  7;
        public const int VIP_MESSAGE_ID_INVALID =  8;
        public const int VIP_BUFFER_UNDERRUN    =  9;
        public const int VIP_BUFFER_OVERRUN     = 10;
        public const int VIP_BAD_VALUE          = 11;
        public const int VIP_ILLEGAL_FORMAT     = 12;
        public const int VIP_FAILED_TO_COMMIT   = 13;
        public const int VIP_DONOR_DOWNLOADED   = 14;
        public const int VIP_BAD_CATALOG_ENTRY  = 15;


        public const int VIP_MAX_TRIMA_MSG_SIZE = 8192;

        public const int trimaVistaMsgLength = VIP_MAX_TRIMA_MSG_SIZE - trimaVistaHeaderSize;

        //public byte trimaVistaBuffer[trimaVistaMsgLength];

        //
        // Define the standard message header
        //
        public class trimaVistaMsg
        {
           public trimaVistaHeader hdr;
           public byte[] trimaVistaBuffer = new byte[trimaVistaMsgLength];
        }


        //-----------------------------------
        //
        // Command Messages
        //
        public const int VIP_FIRST_CMD_MSG                 = 101;
        public const int VIP_SET_LOCAL_TIME                = VIP_FIRST_CMD_MSG;
        public const int VIP_START_PERIODIC_STATUS         = 102;
        public const int VIP_SET_OFFLINE_CONFIG            = 103;
        public const int VIP_REQUEST_FILE_LIST             = 104;
        public const int VIP_REQUEST_FILE_LIST_BY_SN       = 105;
        public const int VIP_UPLOAD_FILE                   = 106;
        public const int VIP_DOWNLOAD_DONOR_INFO           = 107;
        public const int VIP_PING                          = 108;
        public const int VIP_BARCODE_RESPONSE              = 109;
        public const int VIP_INTERFACE_STATE               = 110;
        public const int VIP_START_MACHINE_STATUS          = 111;
        public const int VIP_DOWNLOAD_BIOMETRIC_SIGNATURES = 112;
        public const int VIP_BIOMETRIC_SIGNATURE_RESPONSE  = 113;
        public const int VIP_DOWNLOAD_CATALOG_INFO         = 114;
        public const int VIP_REQUEST_OPT_SETTING_VALUES    = 115;
        public const int VIP_LAST_CMD_MSG                  = VIP_REQUEST_OPT_SETTING_VALUES;



        //
        // Common Message definitions.
        //

        public const int VIP_MAX_DONOR_NAME       =   129;
        public const int VIP_DATE_LENGTH          =     8;
        public const int VIP_BITMAP_SIZE          = 40294; /* Bitmap 171x228 pixels (256 colors)*/
        public const int VIP_MAX_VISTA_PROCEDURES =    50;


        public const int VIP_LANG_ENGLISH    = 0;
        public const int VIP_LANG_FRENCH     = 1;
        public const int VIP_LANG_GERMAN     = 2;
        public const int VIP_LANG_ITALIAN    = 3;
        public const int VIP_LANG_JAPANESE   = 4;
        public const int VIP_LANG_SPANISH    = 5;
        public const int VIP_LANG_DUTCH      = 6;
        public const int VIP_LANG_PORTUGUESE = 7;
        public const int VIP_LANG_SWEDISH    = 8;
        public const int VIP_LANG_KOREAN     = 9;
        public const int VIP_LANG_RUSSIAN    = 10;
        public const int VIP_LANG_CZECH      = 11;
        public const int VIP_LANG_POLISH     = 12;
        public const int VIP_LANG_CHINESE    = 13;

        public const int VIP_UNITS_IN = 1;
        public const int VIP_UNITS_CM = 0;

        public const int VIP_UNITS_LB = 1;
        public const int VIP_UNITS_KG = 0;

        public const int VIP_RBC_HEMATOCRIT = 0;
        public const int VIP_RBC_HEMOGLOBIN = 1;

        public const int VIP_DATE_MMDDYY = 0;
        public const int VIP_DATE_DDMMYY = 1;
        public const int VIP_DATE_YYMMDD = 2;

        public const int VIP_TIME_24H = 0;
        public const int VIP_TIME_12H = 1;

        public const int VIP_DELIM_COMMA   = 0;
        public const int VIP_DELIM_DECIMAL = 1;

        public const int VIP_AUDIO_HIGH = 0;
        public const int VIP_AUDIO_MED  = 1;
        public const int VIP_AUDIO_LOW  = 3;

        public const int VIP_BLOOD_UNKNOWN =   0;
        public const int VIP_BLOOD_O_NEG   =   2;
        public const int VIP_BLOOD_O_POS   =   4;
        public const int VIP_BLOOD_AB_NEG  =   8;
        public const int VIP_BLOOD_AB_POS  =  16;
        public const int VIP_BLOOD_A_NEG   =  32;
        public const int VIP_BLOOD_A_POS   =  64;
        public const int VIP_BLOOD_B_NEG   = 128;
        public const int VIP_BLOOD_B_POS   = 256;
        public const int VIP_BLOOD_ALL     = 510;

        public const int VIP_TBV_PERCENT = 1;
        public const int VIP_TBV_GTLT    = 2;
        public const int VIP_TBV_MLKG    = 4;
        public const int VIP_TBV_DRBC    = 8;

        public const int VIP_DRAW_SLOW = 0;
        public const int VIP_DRAW_MED  = 1;
        public const int VIP_DRAW_FAST = 2;

        public const int VIP_TRALI_MALE_ONLY      = 0;
        public const int VIP_TRALI_MALE_AB_FEMALE = 1;
        public const int VIP_TRALI_ALL            = 2;

        //
        // Set Local Time Msg
        //
        public class setLocalTimeMsg
        {
            public trimaVistaHeader hdr;
            public int localTime;   // Local Time in UTC.
        }

        //public const int setLocalTimeMsgSize = sizeof (setLocalTimeMsg);


        //
        // Start Periodic Status Msg
        //
        public partial class startPeriodicStatusMsg
        {
           public trimaVistaHeader hdr;
           public int repeatPeriod;
           public uint portNumber;
           public uint receiveTimeout;
        }

        //public const int startPeriodicStatusMsgSize = sizeof (startPeriodicStatusMsg);

   

        //
        // Start Machine Status Msg
        //
        public partial class startMachineStatusMsg
        {
            public trimaVistaHeader hdr;
            public int repeatPeriod;
            public int portNumber;
        }

        //public const int startMachineStatusMsgSize = sizeof (startMachineStatusMsg);

   


        public class rbcCritDoseType
        {
            public float rbcHematocrit;
            public float rbcDose;
            public int meterRas;
            public int rasVolume;
        }

        public class plateletYVType
        {
            public float plateletYield;
            public float plateletVolume;
            public int meterPAS;
            public int pco;
        }

        public class procedureType
        {
            public int platelet;
            public int plasma;
            public int rbc;
            public int bloodType;
            public float maxProcedureTime;
        }

        //
        // Set Offline Configuration Msg
        //
        public const int VIP_MAX_CRIT_DOSE      =  3;
        public const int VIP_MAX_PLATELETYV     = 10;
        public const int VIP_MAX_PLASMA_VOLUME  =  6;
        public const int VIP_MAX_PROCEDURE_LIST = 20;


        public class setOfflineConfigurationMsg
        {
            public trimaVistaHeader hdr;
            public int languageOnTrima;
            public int heightUnits;
            public int weightUnits;
            public int dateFormat;
            public int timeFormat;
            public int decimalDelimeter;
            public int audioLevel;
            public int rbcMeasurementType;
            public int maximumProcedureTime;
            public float maximumReturnPressure;
            public float maximumDrawPressure;
            public float customRatio;
            public float plasmaAcRatio;
            public int acRate;
            public float postHematocrit;
            public int tbvSetting;
            public float tbvPercent;
            public float weightSetting;
            public float noLessThanVolume;
            public float noGreaterThanVolume;
            public float mlPerKg;
            public float drbcTbvLimit;
            public float postProcedurePlateletCount;
            public int maxDrawFlow;
            public int minReplacementVolume;
            public int plateletDivertPrompts;
            public int bloodDivertPrompts;
            public int solutionsBagVolOverride;
            public int drbcSplitNotification;
            public int drbcThreshold;
            public int plasmaRinseback;
            public int salineRinseback;
            public int auditTrailLevel;
            public int airRemovalEnabled;
            public int pasEnabled;
            public int rasEnabled;
            public int showPreAasFlags;
            public int pasDefaultBagVolume;
            public int rasDefaultBagVolume;
            public int rbcRatio;
            public int rbcReplacementFluid;
            public float rbcFluidPercent;
            public int amapMin;
            public int amapMax;
            public float ysf;
            public int guaranteedYield;
            public float coefficientOfVariation;
            public int confidenceLevel;
            public int inletFlowRamp;
            public int inletManagement;
            public int returnManagement;
            public float rsf;
            public int maleOnlyPlatelet;
            public int maleOnlyPlasma;
            public int complementaryPlasma;
            public rbcCritDoseType[] critDose = new rbcCritDoseType[VIP_MAX_CRIT_DOSE];
            public plateletYVType[] plateletYV = new plateletYVType[VIP_MAX_PLATELETYV];
            public float[] plasmaVolume = new float[VIP_MAX_PLASMA_VOLUME];
            public procedureType[] procedureList = new procedureType[VIP_MAX_PROCEDURE_LIST];
        }

        //public const int setOfflineConfigurationMsgSize = sizeof (setOfflineConfigurationMsg);


        //
        // Request File List Msg
        //

        // Max defined by QNX
        public const int VIP_MAX_PATHNAME_LENGTH = 256;
        public const int VIP_MAX_PATTERN_LENGTH  =  49;

        public class requestFileListMsg
        {
            public trimaVistaHeader hdr;
            public byte[] pathName = new byte[VIP_MAX_PATHNAME_LENGTH];
            public byte[] pattern = new byte[VIP_MAX_PATTERN_LENGTH];
        }

        //public const int requestFileListMsgSize = sizeof (requestFileListMsg);


        public const int VIP_MAX_SEQUENCE_NUMBER = 999999;

        //
        // Request File List Msg By Sequence Number
        //
        public class requestFileListBySeqNumMsg
        {
            public trimaVistaHeader hdr;
            public byte[] directoryName = new byte[VIP_MAX_PATHNAME_LENGTH];
            public int sequenceNumber;
        }

        //public const int requestFileListBySeqNumMsgSize = sizeof (requestFileListBySeqNumMsg);


        //
        // Upload Log File Msg
        //

        public const int VIP_MAX_FILENAME_LENGTH = 81;

        public class uploadFileMsg
        {
            public trimaVistaHeader hdr;
            public byte[] fileName = new byte[VIP_MAX_FILENAME_LENGTH];
        };

        //public const int uploadFileMsgSize = sizeof (uploadFileMsg);


        //
        // Donor Info Msg
        //

        public const int VIP_HEIGHT_UNITS_IN = 1;
        public const int VIP_HEIGHT_UNITS_CM = 2;

        public const int VIP_WEIGHT_UNITS_LB = 1;
        public const int VIP_WEIGHT_UNITS_KG = 2;

        public const int VIP_DONOR_GENDER_MALE   = 1;
        public const int VIP_DONOR_GENDER_FEMALE = 2;

        public const int VIP_VOLUME_REMOVAL_TBV = 1;
        public const int VIP_VOLUME_REMOVAL_WEIGHT = 2;
        public const int VIP_VOLUME_REMOVAL_ML_PER_KG = 4;
        public const int VIP_VOLUME_REMOVAL_DRBC_BODY_VOL = 8;


        public class procedureGoalType
        {
            public float plateletYield;
            public float plateletVolume;
            public int meterPAS;
            public int pco;
            public float plasmaVolume;
            public float rbcDose;
            public float rbcHematocrit;
            public int meterRas;
            public int rasVolume;
            public int bloodType;
            public float maxProcedureTime;
            public int designator;
        }



        public class donorInfoMsg
        {
            public trimaVistaHeader hdr;
           // Donor Vital's section 
            public byte[] donorName = new byte[VIP_MAX_DONOR_NAME];
            public byte[] donorDOB = new byte[VIP_DATE_LENGTH + 1];      // (YYYYMMDD) format
            public byte donorGender;
            public byte filler01;
            public float donorHeight;
            public float donorWeight;
            public int donorBloodType;
            public float donorHematocrit;
            public float donorPrecount;
            public float donorSampleVolume;
            public float donorTBV;

           // Trima Configuration section 
            public int heightUnits;
            public int weightUnits;
            public int languageOnTrima;
            public int dateFormat;
            public int timeFormat;
            public int decimalDelimeter;
            public int audioLevel;
            public int rbcMeasurementType;
            public int maximumDonorTime;
            public int maximumProcedureTime;
            public float maximumReturnPressure;
            public float maximumDrawPressure;
            public float customRatio;
            public int acRate;
            public float plasmaAcRatio;
            public float postHematocrit;
            public int tbvSetting;
            public float tbvPercent;
            public float weightSetting;
            public float noLessThanVolume;
            public float noGreaterThanVolume;
            public float mlPerKg;
            public float drbcTbvLimit;
            public float postProcedurePlateletCount;
            public int maxDrawFlow;
            public int minReplacementVolume;
            public int plateletDivertPrompts;
            public int bloodDivertPrompts;
            public int solutionsBagVolOverride;
            public int drbcSplitNotification;
            public int drbcThreshold;
            public int plasmaRinseback;
            public int salineRinseback;
            public int auditTrailLevel;
            public int airRemovalEnabled;
            public int pasEnabled;
            public int rasEnabled;
            public int showPreAasFlags;
            public int pasDefaultBagVolume;
            public int rasDefaultBagVolume;
            public int rbcRatio;
            public int rbcReplacementFluid;
            public float rbcFluidPercent;
            public int amapMin;
            public int amapMax;
            public float ysf;
            public int guaranteedYield;
            public float coefficientOfVariation;
            public int confidenceLevel;
            public int inletFlowRamp;
            public int inletManagement;
            public int returnManagement;
            public float rsf;
            public int maleOnlyPlatelet;
            public int maleOnlyPlasma;
            public int complementaryPlasma;

           // Procedure List section
            public int numberOfProcedures;
            public procedureGoalType[] procedureList = new procedureGoalType[VIP_MAX_VISTA_PROCEDURES];

            public byte[] donorPicture = new byte[VIP_BITMAP_SIZE];  // Bitmap 171x228 pixels (256 colors)
        }

        //public const int donorInfoMsgSize = sizeof (donorInfoMsg);




        public const int VIP_BARCODE_FIRST                      = 1;
        public const int VIP_BARCODE_VALID                      = VIP_BARCODE_FIRST;
        public const int VIP_BARCODE_INVALID                    = 2;
        public const int VIP_BARCODE_WRONG_CATEGORY             = 3;
        public const int VIP_BARCODE_PROCEDURE_DATA_CONSISTENCY = 4;
        public const int VIP_BARCODE_LAST                       = VIP_BARCODE_PROCEDURE_DATA_CONSISTENCY;

        //
        // Barcode Invalid Msg
        // This message is sent by Vista when they determine that a
        // barcoded item is invalid.
        //
        public class barcodeFeedbackMsg
        {
            public trimaVistaHeader hdr;
            public int scanCategory;
            public int scanSequence;
            public int reasonCode;       // action code for Trima
        }

        //public const int barcodeFeedbackMsgSize = sizeof (barcodeFeedbackMsg);



        //
        // Interface State Msg
        //
        public class getInterfaceStateMsg
        {
            public trimaVistaHeader hdr;
        }

        //public const int getInterfaceStateMsgSize = sizeof (getInterfaceStateMsg);


        public class interfaceStateMsg
        {
            public trimaVistaHeader hdr;
            public int privilegedState;
            public int donorDownloaded;
            public int pfrStatus;
            public int originalSequenceNumber;
            public int biometricConfig;
        }


        //public const int interfaceStateMsgSize = sizeof (interfaceStateMsg);


        //
        // Download Biometric Signatures
        //


        public const int VIP_BIO_MAX_BADGE_LENGTH = 81; // Includes null char

        public const int VIP_BIO_MAX_PIN_LENGTH = 7;   // Includes null char

        public const int VIP_BIO_MAX_SIGNATURES = 1000;


        public class downloadBiometricSignaturesMsg
        {
            public trimaVistaHeader hdr;
            public int biometricDeviceId;
            public int numberOfSignatures;
            /*
           union
           {
              char          signatureSection[1];   // Placeholder for start of biometric signatures
              int           temp1;                 // Used to enforce consistent sizing between platforms.
           };
             * */
        };

        //public const int downloadBiometricSignaturesMsgSize = sizeof (downloadBiometricSignaturesMsg);



        //
        // Biometric Signature Response
        //

        public const int VIP_BIO_SIGNATURE_INVALID   = 0;
        public const int VIP_BIO_SIGNATURE_VALID     = 1;
        public const int VIP_BIO_SIGNATURE_VALID_ADD = 2;

        public class biometricSignatureResponseMsg
        {
            public trimaVistaHeader hdr;
            public int biometricDeviceId;
            public int scanSequenceNumber;
            public int response;
            /*
           union
           {
              char          signatureSection[1];   // Placeholder for start of biometric signatures
              int           temp1;                 // Used to enforce consistent sizing between platforms.
           };
             * */
        };

        //public const int biometricSignatureResponseMsgSize = sizeof (biometricSignatureResponseMsg);


        //
        // Catalog Number Download Request
        //

        public const int VIP_CATALOG_BARCODE_SIZE = 80;
        public const int VIP_CATALOG_LIST_SIZE    = 10;

        public class catalogItem
        {
            public int catalogNumber;
            public int tubingSetCode;
            public byte[] barcode = new byte[VIP_CATALOG_BARCODE_SIZE];
        };


        public class downloadCatalogListMsg
        {
            public trimaVistaHeader hdr;
            public int permanent;
            public int numberOfItems;
            public catalogItem[] itemList = new catalogItem[VIP_CATALOG_LIST_SIZE];   
        };

        //public const int downloadCatalogListMsgSize = sizeof (downloadCatalogListMsg);


        public class getOptionalSettingsValuesMsg
        {
            public trimaVistaHeader hdr;
        };

        //public const int getOptionalSettingsValuesMsgSize = sizeof (getOptionalSettingsValuesMsg);


        public class optionalSettingsValuesMsg
        {
            public trimaVistaHeader hdr;
            public int confirmAcConnectionPrompt;
            public int dontSealSampleBagPrompt;
            public int dontConnectAcAtSetLoadPrompt;
            public int displayResidualVolume;
            public int allowFlowAdjustments;
            public int alternateNextProcedureButton;
            public int enableDisplayingOgawaTbv;
            public int displayAverageInletVolume;
            public int fourWayVolumeCutoff;
            public int displayPlateletVolume;
            public int postcountiSpleenMobilizationEnabled;
            public int lockTrimaConfig;
            public int lowPlateletConcentration;
            public int highPlateletConcentration;
            public int rbcMaximumProductVolume;
            public int maximumPasMeteringDuration;
            public int complementaryPlamsaEnabled;
        }


        //public const int optionalSettingsValuesMsgSize = sizeof(optionalSettingsValuesMsg);



            //
            // Status Messages
            //
            public const int VIP_FIRST_STATUS_MSG                  = 201;
            public const int VIP_BARCODE_CONTENTS_MSG              = VIP_FIRST_STATUS_MSG;
            public const int VIP_POWER_FAIL_RECOVER_MSG            = 202;
            public const int VIP_PROCEDURE_PARAMETER_ADJ_MSG       = 203;
            public const int VIP_DONOR_VITALS_UPDATED_MSG          = 204;
            public const int VIP_END_RUN_SUMMARY_MSG               = 205;
            public const int VIP_ALARM_MSG                         = 206;
            public const int VIP_ALARM_ACK_MSG                     = 207;
            public const int VIP_PERIODIC_STATUS_MSG               = 208;
            public const int VIP_DONOR_COMMIT_MSG                  = 209;
            public const int VIP_DONOR_REJECTED_MSG                = 210;
            public const int VIP_OPERATOR_BUTTON_PUSH_MSG          = 212;
            public const int VIP_MACHINE_STATUS_MSG                = 213;
            public const int VIP_BIOMETRIC_AUTHORIZATION_EVENT_MSG = 214;
            public const int VIP_BIOMETRIC_LOG_EVENT_MSG           = 215;
            public const int VIP_LAST_STATUS_MSG                   = VIP_BIOMETRIC_LOG_EVENT_MSG;


            //
            // Barcode Verification Msg
            // This message is sent from Trima to Vista when an item is
            // barcoded.
            //

            public const int VIP_SCAN_STRING_LENGTH = 120;


            public const int VIP_SCAN_CATEGORY_FIRST             =  0;
            public const int VIP_SCAN_CATEGORY_OPERATOR          =  VIP_SCAN_CATEGORY_FIRST;
            public const int VIP_SCAN_CATEGORY_DONOR             =  1;
            public const int VIP_SCAN_CATEGORY_TUBING_SET        =  2;
            public const int VIP_SCAN_CATEGORY_DONATION_ID       =  3;
            public const int VIP_SCAN_CATEGORY_AC                =  4;
            public const int VIP_SCAN_CATEGORY_REPLACEMENT_FLUID =  5;
            public const int VIP_SCAN_CATEGORY_SAMPLE_BAG        =  6;
            public const int VIP_SCAN_CATEGORY_NOTE              =  7;
            public const int VIP_SCAN_CATEGORY_MISC1             =  8;
            public const int VIP_SCAN_CATEGORY_MISC2             =  9;
            public const int VIP_SCAN_CATEGORY_MISC3             = 10;
            public const int VIP_SCAN_CATEGORY_MISC4             = 11;
            public const int VIP_SCAN_CATEGORY_RBC_STORAGE_SOL   = 12;
            public const int VIP_SCAN_CATEGORY_PLT_STORAGE_SOL   = 13;
            public const int VIP_SCAN_CATEGORY_DATA              = 14;
            public const int VIP_SCAN_CATEGORY_MISC5             = 15;
            public const int VIP_SCAN_CATEGORY_NONE              = 16;
            public const int VIP_SCAN_CATEGORY_LAST              = VIP_SCAN_CATEGORY_NONE;


            public const int VIP_SCAN_STATUS_ADDED   = 0;
            public const int VIP_SCAN_STATUS_DELETED = 1;


            public class barcodeContentsMsg
            {
                public trimaVistaHeader hdr;
                public int scanCategory;
                public int scanSequence;
                public int scanStatus;
                public int scanStringLength;
                public byte[] scanString = new byte[VIP_SCAN_STRING_LENGTH];
                public byte scanSymbol;
            };


            //public const int barcodeContentsMsgLength = sizeof (barcodeContentsMsg);



            public const int PFR_FAILED_OR_NO_PFR      = 0;
            public const int PFR_COMPLETE_ALL_RESTORED = 1;
            public const int PFR_COMPLETE_NOT_RESTORED = 2;


            //
            // Power Fail Recovery Indication Msg
            // This message tells Vista whether or not Trima performed a PFR.
            //
            public class powerFailRecoveryIndicationMsg
            {
                public trimaVistaHeader hdr;
                public int powerFailPerformed;
            };

            //public const int powerFailRecoveryIndicationMsgLength = sizeof (powerFailRecoveryIndicationMsg);



            //
            // Alarm Msg
            //
            public class alarmMsg
            {
                public trimaVistaHeader hdr;
                public int alarmId;
            };

            //public const int alarmMsgLength = sizeof (alarmMsg);



            public const int VIP_RESPONSE_ENDRUN    = 0;
            public const int VIP_RESPONSE_RINSEBACK = 1;
            public const int VIP_RESPONSE_CONTINUE  = 2;
            public const int VIP_RESPONSE_CONFIRM   = 3;
            public const int VIP_RESPONSE_UNLOAD    = 4;
 

            public class alarmAckMsg
            {
                public trimaVistaHeader hdr;
                public int alarmId;
                public int alarmResponse;
            };

            //public const int alarmAckMsgLength = sizeof (alarmAckMsg);



            //
            // End Run Summary Msg
            //
            // As spec'ed against proc/algorithm/productqualityinformation.cpp
            //   ProductQualityInformation::Initialize
            //
            public const int VIP_MAX_REASONS = 21;

            public const int VIP_RINSEABCK_UNSUCCESSFUL      = 0;
            public const int VIP_RINSEBACK_SUCCESSFUL_NORMAL = 1;
            public const int VIP_RINSEBACK_SUCCESSFUL_PLASMA = 2;
            public const int VIP_RINSEBACK_SUCCESSFUL_SALINE = 3;

            //not part of  vista interface but added to limit scope
            public class tm
            {
                public int tm_sec;     /* seconds after the minute - [0,59] */
                public int tm_min;     /* minutes after the hour - [0,59] */
                public int tm_hour;    /* hours since midnight - [0,23] */
                public int tm_mday;    /* day of the month - [1,31] */
                public int tm_mon;     /* months since January - [0,11] */
                public int tm_year;    /* years since 1900 */
                public int tm_wday;    /* days since Sunday - [0,6] */
                public int tm_yday;    /* days since January 1 - [0,365] */
                public int tm_isdst;   /* daylight savings time flag */
            };

            public class endRunSummaryMsg
            {
                public trimaVistaHeader hdr;
                public int totalAcUsed;
                public int ActualAcToDonor;
                public int bloodVolumeProcessed;
                public int bloodVolumeProcessedPlatelet;
                public int plateletVolumeActual;
                public int plateletYieldActual;
                public int acVolumeInPlatelets;
                public int PASVolume;
                public int offlinePASVolume;
                public int plasmaActualVolume;
               public int               acVolumeInPlasma;
               public int rbcIndividualProductReporting;
               public int rbc1ActualVolume;
               public int rbc2ActualVolume;
               public int acVolumeInRBC1;
               public int acVolumeInRBC2;
               public int rbc1RasVolume;
               public int rbc2RasVolume;
               public tm startofAasTime;
               public int offlineRas1Volume;
               public int offlineRas2Volume;
               public float rbc1ActualHematocrit;
               public float rbc2ActualHematocrit;
               public float postHematocrit;
               public int postPlateletCount;
               public int replacementFluidVolume;
               public tm endOfRunTime;
               public int lengthOfRunWithPauseRecover;
               public int lengthOfRunWithoutPauseRecover;
               public int labelPlateletsLeukoreduced;
               public int labelPlasmaLeukoreduced;
               public int labelRBC1Leukoreduced;
               public int labelRBC2Leukoreduced;
               public int numberOfRbc1VolumeReasons;
               public int[] rbc1VolumeReason = new int[VIP_MAX_REASONS];
               public int numberOfRbc2VolumeReasons;
               public int[] rbc2VolumeReason = new int[VIP_MAX_REASONS];
               public int numberOfRbc1WbcReasons;
               public int[] rbc1WbcReason = new int[VIP_MAX_REASONS];
               public int numberOfRbc2WbcReasons;
               public int[] rbc2WbcReason = new int[VIP_MAX_REASONS];
               public int numberOfRbc1QualityReasons;
               public int[] rbc1QualityReason = new int[VIP_MAX_REASONS];
               public int numberOfRbc2QualityReasons;
               public int[] rbc2QualityReason = new int[VIP_MAX_REASONS];
               public int numberOfPlasmaWbcReasons;
               public int[] plasmaWbcReason = new int[VIP_MAX_REASONS];
               public int numberOfPlateletWbcReasons;
               public int[] plateletWbcReason = new int[VIP_MAX_REASONS];
               public int numberOfPlateletConcentrationReasons;
               public int[] plateletConcentrationReason = new int[VIP_MAX_REASONS];
               public int numberOfPlasmaVolumeReasons;
               public int[] plasmaVolumeReason = new int[VIP_MAX_REASONS];
               public int numberOfPlateletVolumeReasons;
               public int[] plateletVolumeReason = new int[VIP_MAX_REASONS];
               public int rinsebackCompleteFlag;
               public int packedRbcResidualInSet;
               public int plasmaResidualInSet;
               public int complementaryPlasmaVolume;
               public int complementaryPlasmaIcon;
            }

            //public const int endRunSummaryMsgLength = sizeof (endRunSummaryMsg);


            //
            // Procedure Parameter Adjustment
            //
            public enum PROCEDURE_PARAMETER_ADJ_ENUMS
            {
	            VIP_ACCESS_PRESSURE_UP	=	0,
	            VIP_ACCESS_PRESSURE_DOWN,
	            VIP_RETURN_PRESSURE_UP,
	            VIP_RETURN_PRESSURE_DOWN,
	            VIP_TINGLING_UP,
	            VIP_TINGLING_DOWN,
	            VIP_CLUMPING_UP,
	            VIP_CLUMPING_DOWN,
	            VIP_SPILLOVER,
	            VIP_AIR_IN_PLASMA_LINE,
	            VIP_SALINE_BOLUS
            };

            public class procedureParameterAdjustmentMsg
            {
                public trimaVistaHeader hdr;
                public int adjustment;    // Enumerated type containing both parameter and direction.
            };

            //public const int procedureParameterAdjMsgLength = sizeof (procedureParameterAdjustmentMsg);


            //
            // Donor Vitals Updated
            //
            public class donorVitalsUpdatedMsg
            {
                public trimaVistaHeader hdr;
                public int donorVitalsStatus;
                public int donorInfoStatus;
                public int donorDownloadStatus;
                public float hematocrit;
                public float precount;
                public float height;
                public float             weight;
                public int donorGender;
                public float procDonorTBV;
                public float safetyDonorTBV;
                public int donorBloodType;
            }

            //public const int donorVitalsUpdatedMsgLength = sizeof (donorVitalsUpdatedMsg);


            public const int VIP_MAX_SUBSTATE_LENGTH     = 36;
            public const int VIP_MAX_RECOVERSTATE_LENGTH = 36;


            //
            // Trima Periodic Status Msg
            //
            public partial class trimaPeriodicStatusMsg
            {
                public trimaVistaHeader hdr;
                public float targetProcedureTime;
                public float currentProcedureTime;
                public float remainingProcedureTime;

                public int targetPlateletYield;
                public int currentPlateletYield;

                public int targetPlasmaVolume;
                public int currentPlasmaVolume;

                public int targetRbcVolume;
                public int currentRbcVolume;

                public float targetRbcCollectHct;
                public float currentRbcCollectHct;

                public int targetPlateletVolume;
                public int currentPlateletVolume;

                public int targetPASVolume;
                public int currentPASVolume;

                public int targetRAS1Volume;
                public int currentRAS1Volume;

                public int targetRAS2Volume;
                public int currentRAS2Volume;

                public int currentPlateletAcVolume;
                public int currentPlasmaAcVolume;
                public int currentRbc1AcVolume;
                public int currentRbc2AcVolume;

                public int totalBloodProcessed;
                public int donorTbv;
                public int trimaSystemState;

                public int cassetteType;
                public int cassettePosition;
                public int selectedProcedure;
                public int catalogNumber;

                public byte[] subState = new byte[VIP_MAX_SUBSTATE_LENGTH + 1];
                public byte[] recoveryState = new byte[VIP_MAX_RECOVERSTATE_LENGTH + 1];
            }

            //public const int trimaPeriodicStatusMsgLength = sizeof (trimaPeriodicStatusMsg);



            //
            // Individual Pump status
            //
            public partial class pumpStatus
            {
                public float commandedRate;
                public float actualRate;
                public float accumulatedVolume;
            };



            //
            // Machine Status Message
            //
            public partial class trimaMachineStatusMsg
            {
                public trimaVistaHeader hdr;
                public pumpStatus acPump;
                public pumpStatus inletPump;
                public pumpStatus plasmaPump;
                public pumpStatus plateletPump;
                public pumpStatus returnPump;
                public pumpStatus replacementPump;
            };


            //public const int trimaMachineStatusMsgLength = sizeof(trimaMachineStatusMsg);



            //
            // Operator button push.
            //
            public class operatorButtonPushMsg
            {
                public trimaVistaHeader hdr;
                public short screenId;
                public short buttonId;
            };

            //public const int operatorButtonPushLength = sizeof (operatorButtonPushMsg);



            //
            // Vista Donor Rejected Msg
            //
            public class donorRejectedMsg
            {
                public trimaVistaHeader hdr;
            };

            //public const int donorRejectedMsgLength = sizeof(donorRejectedMsg);




            //
            // Vista Donor Committed
            //
            public class donorCommittedMsg
            {
                public trimaVistaHeader hdr;
            };

            //public const int donorCommittedMsgLength = sizeof(donorCommittedMsg);



            //
            // Biometric Authorization Event
            //

            //
            // Generic Definition
            public class biometricAuthorizationEventMsg
            {
                public trimaVistaHeader hdr;
                public int biometricDeviceId;
                public int scanSequenceNumber;
                public byte[] badge = new byte[VIP_BIO_MAX_BADGE_LENGTH];
                /*
               union
               {
                  char          signatureSection[1];   // Placeholder for start of biometric signatures
                  int           temp1;                 // Used to enforce consistent sizing between platforms.
               };
                 * */
            };

            //public const int biometricAuthorizationEventMsgSize = sizeof(biometricAuthorizationEventMsg);



            //
            // PIN Specific definition
            public class PinAuthorizationEventMsg
            {
                public trimaVistaHeader hdr;
                public int biometricDeviceId;
                public int scanSequenceNumber;
                public byte[] badge = new byte[VIP_BIO_MAX_BADGE_LENGTH];
                public byte[] pin = new byte[VIP_BIO_MAX_PIN_LENGTH];
            }

            //public const int PinAuthorizationEventMsgSize = sizeof(PinAuthorizationEventMsg);



        //
        // Biometric Log Event
        //
        /*
        typedef union TriggerData
        {
           struct {
              int height;  // CM
              int weight;  // KG
              int gender;  // 0 = MALE, 1 = FEMALE
           } donor_vitals_a;

           struct {
              int   bloodType;
              float plateletCount;
              float hematocrit;
           } donor_vitals_b;

           int               value;
        };
         * */

            // This list is here for Vista convenience.  It mirrors the real def'n in TED IF.
            public const int VIP_BIO_SIGNATURE_PIN = 1;


            public const int VIP_TRIGGER_NONE                  = 0;
            public const int VIP_TRIGGER_DONOR_VITALS_A_CHANGE = 1; // Donor Entry Vitals (Gender, Height, Weight)
            public const int VIP_TRIGGER_DONOR_VITALS_B_CHANGE = 2; // Adjustment Vitals (Blood Type, Hct, Plt Count)
            public const int VIP_TRIGGER_PROCEDURE_SELECTED    = 3;
            public const int VIP_TRIGGER_ADJUSTMENT            = 4;
            public const int VIP_TRIGGER_ALARM                 = 5;


            public const int VIP_BIO_AUTH_NONE    = 0;
            public const int VIP_BIO_AUTH_SUCCESS = 1;
            public const int VIP_BIO_AUTH_FAILED  = 2;
            public const int VIP_BIO_AUTH_UNKNOWN = 3;

            public class biometricLogEventMsg
            {
                public trimaVistaHeader hdr;
                public uint sequenceNumber;                   // Sequence Number of event
                public int timestamp;                        // Time event happened
                public int trigger;                          // Trigger that caused event
               //TriggerData      data;                             // Data from trigger
                public int status;                           // Status of event
                public byte[] badge = new byte[VIP_BIO_MAX_BADGE_LENGTH];  // Badge ID
                public int device;
            };

            //public const int biometricLogEventMsgSize = sizeof(biometricLogEventMsg);


            /// <summary>
            /// added from states.h for translation
            /// </summary>
            public enum State_names
            {
                FIRST_STATE,
                SELF_TEST,
                STARTUP_TESTS,
                DISPOSABLE_TEST,
                AC_CONNECTED,
                AC_PRIME,
                DONOR_CONNECTED,
                BLOOD_PRIME,
                BLOOD_RUN,
                BLOOD_RINSEBACK,
                DONOR_DISCONNECT,
                POST_RUN,
                METERED_STORAGE,
                METERED_STORAGE_DISCONNECT,
                SERVICE_MODE,
                DEFAULT_STATE,
                LAST_PROCEDURE_STATE = 10000,
            }
    }
}
