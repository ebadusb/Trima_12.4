#!/bin/bash
#
# Fixes pathname elements for a Parasoft C++Test Build Data File (BDF).
#
# usage: fix_bdf [-t top_dir] [-p project_name] bdf_file > my_bdf_file
#
usage() {
  cat <<EOF >&2

  usage: fix_bdf [-t top_dir] [-p project_name] bdf_file > my_bdf_file

  top_dir      = Top of Trima source tree (parent of Trima_X.Y).
                 Use forward slashes in path.
                 Example: -t 'C:/My Space/src/Trima/Trima_6.3'
                 [Default: the current working directory]

  project_name = Eclipse/C++Test project name to set
                 [Default: project_name is unchanged]

  bdf_file     = the input Build Data File generated by C++TestScan

  Fixes values for working_dir and project_name in a C++Test BDF file.
  Results go to stdout.
EOF
   exit 1
}

# Check to see if at least one argument was specified
if [ $# -lt 1 ] ; then
   usage
fi

# Check to see that COMDIR and WIND_BASE are defined
if [ ! "$COMDIR" -o ! "$WIND_BASE" ] ; then
   echo "ERROR: need to define environment variables COMDIR and WIND_BASE" >&2
   exit 1
fi

proj=""
# topd="$(cygpath -m $PWD)"  ## cygpath not available with Tornado's bash ;-(
topd="$(cmd /c "echo %CD%" | sed 's/\\/\//g')"

# Process the arguments
#
while getopts :p:t:o:h opt ; do
   case "$opt" in
      h) usage;;
      t) topd=$OPTARG;;
      p) proj=$OPTARG;;
      :)
         echo "Option -$OPTARG requires an argument." >&2
         usage
         ;;
     \?)
         echo "Invalid option: -$OPTARG" >&2
         usage
         ;;
   esac
done
shift $((OPTIND-1))

# Get and check for the input file:
#
inpf=$@
if [ ! -f $inpf ] ; then
   echo "Input file not found: $inpf" >&2
   usage
fi

################################################################################
# This is the main awk processing script
#
awk -v PROJ="$proj" -v TOPDIR="$topd" '
  BEGIN {
    idx=0 ; com=""; 
    gsub("/", "\\", TOPDIR)
    COMDIR = ENVIRON[ "COMDIR" ]    ; gsub("/", "\\", COMDIR)
    VXDIR  = ENVIRON[ "WIND_BASE" ] ; gsub("\\\\", "/", VXDIR)
    # print "COMDIR: " COMDIR
    # print "VXDIR : " VXDIR
  }

  # Find the value the top dir in this BDF; convert all slashes to ,
  idx==0 && /working_dir=.*\\trima_common/ {
    idx = index($0, "\\trima_common")
    i1  = index($0, "=")+1
    top = substr($0, i1, idx-length("\trima_common")-1 )
    gsub("[/\\\\]", "," , top )
  }

  # Replace top dir
  /working_dir=/{ print "working_dir=" TOPDIR substr($0, idx); next }

  # Find the value of Common dir in this BDF; convert all slashes to ,
  # Note the 2nd alternative where build server uses a TRIMA_COMMON library
  com == "" && /arg=-I.*Common.*include|arg=-I.*TRIMA_COMMON_.*include/{
      i1  = index($0,"-I")+2
      i2  = index($0,"include")-1
      com = substr($0, i1, i2-i1)
      xxx = gensub("[/\\\\]", ",", "g", com)
      # print "xxx: " xxx
  }

  # Replace instances of Common dir
  /arg=.*Common.*|arg=.*TRIMA_COMMON_.*/{
    # Convert all slashes to commas
    yyy = gensub("[/\\\\]", ",", "g", $0)
    if (sub(xxx, COMDIR, yyy)) {
       # Switch leftover commas to \
       gsub(",", "\\", yyy);
       print yyy
       next
    }
  }

  # Replace top of Tornado dir with local value
  /arg=.*[CD]:.*ornado/{ 
    myvx = gensub("[CD]:.*ornado2.2", VXDIR, 1, $0)
    print myvx
    next
  }

  # Replace remaining instances of of top dir
  /arg=[CD]:.*/{
    yyy = gensub("[/\\\\]", ",", "g", $0)
    if (sub(top, TOPDIR, yyy)) {
       gsub(",", "/", yyy)
       print yyy
       next
    }
  }

  # Replace project name if provided
  PROJ && /project_name=/{ print "project_name=" PROJ; next }

  # Otherwise, print the line as-is
  {print}

' $inpf
