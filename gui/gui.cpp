/************************> FOCUSSED GUI DOMAIN <****************************
* Copyright(c) 2003 GAMBRO BCT, Inc. All rights reserved
* Author:       Regis McGarry
* Class name:   N/A
* File name:    gui.cpp
* Contents:     See prototype header descriptions below...
* Description:
  This file includes all of the general defines, manifests, and enums used
  throughout the GUI domain.

$Header$

*************************< FOCUSSED GUI DOMAIN >****************************/

#include "gui.h"

const char* scrnIdToStr (GUI_SCREEN_ID id)
{
   switch (id)
   {
      case GUI_SCREEN_NULL_SCREEN : return "NULL";
      case GUI_SCREEN_SYSDONOR : return "SYSDONOR";
      case GUI_SCREEN_SYSCASSETTE : return "SYSCASSETTE";
      case GUI_SCREEN_SYSDISP : return "SYSDISP";
      case GUI_SCREEN_PTF_MOUNT : return "PTF MOUNT";
      case GUI_SCREEN_SYSCLAMP : return "SYSCLAMP";
      case GUI_SCREEN_PAS_INIT_SPLIT : return "PAS INIT SPLIT";
      case GUI_SCREEN_CLAMP_CROSSOVER : return "CLAMP CROSSOVER";
      case GUI_SCREEN_SYSTEST : return "SYSTEST";
      case GUI_SCREEN_ABORTCNF : return "ABORTCNF";
      case GUI_SCREEN_CLUMP : return "CLUMP";
      case GUI_SCREEN_DISCONN : return "DISCONNECT";
      case GUI_SCREEN_DONCONN : return "DONOR CONNECT";
      case GUI_SCREEN_DONINFO : return "DONOR INFO";
      case GUI_SCREEN_DONVITAL : return "DONOR VITALS";
      case GUI_SCREEN_KEYPAD : return "KEYPAD";
      case GUI_SCREEN_LISTBOX : return "LISTBOX";
      case GUI_SCREEN_PLT_LISTBOX : return "PLT LISTBOX";
      case GUI_SCREEN_PLAS_LISTBOX : return "PLASMA LISTBOX";
      case GUI_SCREEN_RBC_LISTBOX : return "RBC LISTBOX";
      case GUI_SCREEN_SET_LISTBOX : return "SET LISTBOX";
      case GUI_SCREEN_LANG_LISTBOX : return "LANGUAGE LISTBOX";
      case GUI_SCREEN_CONFIRM_BOX : return "CONFIRM BOX";
      case GUI_SCREEN_RAS_CONNECT_CONFIRM_BOX : return "RAS CONNECT CONFIRM BOX";
      case GUI_SCREEN_PAS_CONNECT_CONFIRM_BOX : return "PAS CONNECT CONFIRM BOX";
      case GUI_SCREEN_SALINE_CONNECT_CONFIRM_BOX : return "SALINE CONNECT CONFIRM BOX";
      case GUI_SCREEN_AC_CONNECT_CONFIRM_BOX : return "AC CONNECT CONFIRM BOX";
      case GUI_SCREEN_REBOOT_CONFIRM_BOX : return "RESTART CONFIRM BOX";
      case GUI_SCREEN_PREDICT_CONFIRM_BOX : return "PREDICT CONFIRM BOX";
      case GUI_SCREEN_POWERUP : return "POWERUP";
      case GUI_SCREEN_RUNPROC : return "RUN PROCEDURE";
      case GUI_SCREEN_RUNSUMM1 : return "RUN SUMMARY 1";
      case GUI_SCREEN_RUNSUM_PLT : return "PLATELET RUN SUMMARY";
      case GUI_SCREEN_RUNSUM_PLASMA : return "PLASMA RUN SUMMARY";
      case GUI_SCREEN_RUNSUM_RBC : return "RBC RUN SUMMARY";
      case GUI_SCREEN_RUNSUM_RBC_PROD1 : return "RBC RUN SUMMARY PROD1";
      case GUI_SCREEN_RUNSUM_RBC_PROD2 : return "RBC RUN SUMMARY PROD2";
      case GUI_SCREEN_RUNSUMM2 : return "RUN SUMMARY 2";
      case GUI_SCREEN_SYSACATT : return "SYSACATT";
      case GUI_SCREEN_TROUBLE : return "TROUBLE";
      case GUI_SCREEN_ALARM : return "ALARM";
      // case GUI_SCREEN_SERV1: return "SERV1";
      case GUI_SCREEN_PREDICT : return "PREDICT";
      case GUI_SCREEN_CONFIG : return "CONFIG";
      case GUI_SCREEN_CONFIG_MACHINE : return "CONFIG MACHINE";
      case GUI_SCREEN_CONFIG_LANGUAGE : return "CONFIG LANGUAGE";
      case GUI_SCREEN_CONFIG_PLASMA : return "CONFIG PLASMA";
      case GUI_SCREEN_CONFIG_PLATELET : return "CONFIG PLATELET";
      case GUI_SCREEN_CONFIG_PROCEDURE : return "CONFIG PROCEDURE";
      case GUI_SCREEN_CONFIG_RBC : return "CONFIG RBC";
      case GUI_SCREEN_CONFIG_DONOR : return "CONFIG DONOR";
      case GUI_SCREEN_CONFIG_PRIORITY : return "CONFIG PRIORITY";
      case GUI_SCREEN_CONFIG_REPLACEMENT_FLUID : return "CONFIG REPLACEMENT FLUID";
      case GUI_SCREEN_CONFIG_VOLUME_LIMITS : return "CONFIG VOLUME LIMITS";
      case GUI_SCREEN_CONFIG_METERED_SOLUTIONS : return "CONFIG METERED SOLUTION";
      case GUI_SCREEN_AAS_CLAMP_CHANNEL : return "AAS CLAMP CHANNEL";
      case GUI_SCREEN_AAS_CHANNEL_TEST : return "AAS CHANNEL TEST";
      case GUI_SCREEN_AAS_CONNECT_PAS : return "AAS CONNECT PAS";
      case GUI_SCREEN_AAS_CONNECT_RAS : return "AAS CONNECT RAS";
      case GUI_SCREEN_AAS_PRIME : return "AAS PRIME";
      case GUI_SCREEN_AAS_PAS_SPLIT : return "AAS PAS SPLIT";
      case GUI_SCREEN_AAS_ADDITION : return "AAS ADDITION";
      case GUI_SCREEN_MSS_END : return "METERED SOLUTION END";
      case GUI_SCREEN_SERVICE : return "SERVICE";
      case GUI_SCREEN_TOUCHSCREEN_CAL : return "TOUCHSCREEN CAL";
      case GUI_SCREEN_CONFIRM_DON_INFO : return "DONOR DOWNLOAD";
      case GUI_SCREEN_REPFLUID : return "REPLACE FLUID";
      case GUI_SCREEN_SETID : return "SET ID";
      case GUI_SCREEN_CFR11 : return "CFR 11";
      case GUI_SCREEN_BARCODE : return "BARCODE";
      case GUI_SCREEN_AAS_RUN_SUMMARY : return "AAS RUN SUMMARY";
      case GUI_SCREEN_DRBC_SPLIT : return "DRBC SPLIT";
      case GUI_SCREEN_AAS_TRANSITION_DUMMY : return "AAS TRANSITION DUMMY";
      case GUI_SCREEN_POWERDOWN : return "POWERDOWN";
      case GUI_SCREEN_PAS_EMPTY : return "PAS EMPTY";
      case GUI_SCREEN_RBC_SPLIT_INIT : return "RBC SPLIT INIT";
      case GUI_SCREEN_SEAL_AND_DETACH : return "SEAL AND DETACH";
      case GUI_SCREEN_JP_CLAMP_BLOOD_DIVERSION : return "JAPAN CLAMP BLOOD DIVERSION";
      case GUI_SCREEN_CFG_PLT_AMAP : return "CFG PLT AMAP";
      case GUI_SCREEN_PREDICT_COMP_PLS_CONFIRM_BOX : return "PREDICT COMPLEMENTARY PLASMA CONFIRM";
      case GUI_SCREEN_CONFIG_SOFTWARE_OPTIONS : return "CONFIG SOFTWARE OPTIONS";
      case GUI_SCREEN_KEYBOARD : return "KEYBOARD";
      case GUI_SCREEN_JP_CLAMP_PLASMA_AIR_BAG : return "JP CLAMP PLASMA AIR BAG";
      case GUI_SCREEN_PAS_BARCODE_CONFIRM_BOX : return "PAS BAG BARCODE CONFIRM";

     #if CPU==SIMNT
      case GUI_SCREEN_TOTAL_SCREENS : return "TOTAL SCREENS.  NOT REALLY A SCREEN";
     #endif /* CPU=SIMNT */
      default : return "UNKNOWN";
   }

   return "";
}



const char* btnIdToStr (GUI_BUTTON_ID id)
{
   switch (id)
   {
      case GUI_BUTTON_NULL_BUTTON : return "NULL BUTTON";
      case GUI_BUTTON_GOBACK : return "GO BACK";
      case GUI_BUTTON_CANCEL : return "CANCEL";
      // case GUI_BUTTON_HELP: return "HELP";
      case GUI_BUTTON_CONTINUE : return "CONTINUE";
      case GUI_BUTTON_LOWLEFT : return "LOW LEFT";
      case GUI_BUTTON_SCREENSHOT : return "SCREENSHOT";
      case GUI_BUTTON_LOADSYS : return "LOAD SYSTEM";
      case GUI_BUTTON_DONORINFO : return "DONOR INFO";
      case GUI_BUTTON_DISCONN_CONFIRM : return "DISCONNECT CONFIRM";
      case GUI_BUTTON_DONOR_GENDER : return "GENDER";
      case GUI_BUTTON_DONOR_HEIGHT : return "HEIGHT";
      case GUI_BUTTON_DONOR_WEIGHT : return "WEIGHT";
      case GUI_BUTTON_DONOR_BLOOD_TYPE : return "BLOOD TYPE";
      case GUI_BUTTON_DONOR_HEMATOCRIT : return "HEMATOCRIT";
      case GUI_BUTTON_DONOR_PLATELET_PRECOUNT : return "PLATELET PRECOUNT";
      case GUI_BUTTON_PRED_DONOR_TIME : return "DONOR TIME";
      case GUI_BUTTON_PRED_FLOW_RATE : return "FLOW RATE";
      case GUI_BUTTON_PRED_SELECT_PREVIOUS : return "SELECT PREVIOUS";
      case GUI_BUTTON_PRED_SELECT_NEXT : return "PREDICT SELECT NEXT";
      case GUI_BUTTON_KPAD_CLEAR : return "KEYPAD CLEAR";
      case GUI_BUTTON_KPAD_1 : return "KEYPAD 1";
      case GUI_BUTTON_KPAD_2 : return "KEYPAD 2";
      case GUI_BUTTON_KPAD_3 : return "KEYPAD 3";
      case GUI_BUTTON_KPAD_4 : return "KEYPAD 4";
      case GUI_BUTTON_KPAD_5 : return "KEYPAD 5";
      case GUI_BUTTON_KPAD_6 : return "KEYPAD 6";
      case GUI_BUTTON_KPAD_7 : return "KEYPAD 7";
      case GUI_BUTTON_KPAD_8 : return "KEYPAD 8";
      case GUI_BUTTON_KPAD_9 : return "KEYPAD 9";
      case GUI_BUTTON_KPAD_0 : return "KEYPAD 0";
      case GUI_BUTTON_KPAD_ENTER : return "KEYPAD ENTER";
      case GUI_BUTTON_RUN_CURRENT_TIME : return "CURRENT TIME";
      case GUI_BUTTON_RUN_TIME_MIN : return "TIME MINUTE";
      case GUI_BUTTON_ADJUST_DRAW_UP : return "DRAW UP";
      case GUI_BUTTON_ADJUST_DRAW_DN : return "DRAW DOWN";
      case GUI_BUTTON_ADJUST_RETURN_UP : return "RETURN UP";
      case GUI_BUTTON_ADJUST_RETURN_DN : return "RETURN DOWN";
      case GUI_BUTTON_ADJUST_AC_UP : return "AC UP";
      case GUI_BUTTON_ADJUST_AC_DN : return "AC DOWN";
      case GUI_BUTTON_ADJUST_CLUMP_UP : return "CLUMP UP";
      case GUI_BUTTON_ADJUST_CLUMP_DN : return "CLUMP DOWN";
      case GUI_BUTTON_ADJUST_SPILLOVER : return "ADJUST SPILLOVER";
      case GUI_BUTTON_ADJUST_AIR_PLASMA : return "AIR PLASMA";
      case GUI_BUTTON_ADJUST_SALINE_BOLUS : return "ADJUST SALINE BOLUS";
      case GUI_BUTTON_ADJUST_SERVICE_DATA : return "ADJUST SERVICE DATA";
      case GUI_BUTTON_ALARM_CONTINUE : return "ALARM CONTINUE";
      case GUI_BUTTON_ALARM_RINSEBACK : return "ALARM RINSEBACK";
      case GUI_BUTTON_ALARM_EXIT : return "ALARM EXIT";
      case GUI_BUTTON_ALARM_ADJUST : return "ALARM ADJUST";
      case GUI_BUTTON_ALARM_UNLOAD : return "ALARM UNLOAD";
      case GUI_BUTTON_CONFIG_MACHINE : return "CONFIG MACHINE";
      case GUI_BUTTON_ABORTCNF_EXIT : return "ABORT CONFIRM EXIT";
      case GUI_BUTTON_ABORTCNF_NOEXIT : return "ABORT CONFIRM NOEXIT";
      case GUI_BUTTON_ABORTCNF_ABORT_RAS : return "ABORT CONFIRM RAS";
      case GUI_BUTTON_ABORTCNF_ABORT_PAS : return "ABORT CONFIRM PAS";
      case GUI_BUTTON_CONFIG_LISTBOX_1 : return "CONFIG LISTBOX 1";
      case GUI_BUTTON_CONFIG_LISTBOX_2 : return "CONFIG LISTBOX 2";
      case GUI_BUTTON_CONFIG_LISTBOX_3 : return "CONFIG LISTBOX 3";
      case GUI_BUTTON_CONFIG_LISTBOX_4 : return "CONFIG LISTBOX 4";
      case GUI_BUTTON_CONFIG_LISTBOX_5 : return "CONFIG LISTBOX 5";
      case GUI_BUTTON_CONFIG_LISTBOX_6 : return "CONFIG LISTBOX 6";
      case GUI_BUTTON_CONFIG_LISTBOX_7 : return "CONFIG LISTBOX 7";
      case GUI_BUTTON_CONFIG_LISTBOX_8 : return "CONFIG LISTBOX 8";
      case GUI_BUTTON_CONFIG_LISTBOX_9 : return "CONFIG LISTBOX 9";
      case GUI_BUTTON_CONFIG_LISTBOX_10 : return "CONFIG LISTBOX 10";
      case GUI_BUTTON_CASSETTE_LISTBOX_1 : return "CASSETTE LISTBOX 1";
      case GUI_BUTTON_CASSETTE_LISTBOX_2 : return "CASSETTE LISTBOX 2";
      case GUI_BUTTON_CASSETTE_LISTBOX_3 : return "CASSETTE LISTBOX 3";
      case GUI_BUTTON_CASSETTE_LISTBOX_4 : return "CASSETTE LISTBOX 4";
      case GUI_BUTTON_CASSETTE_LISTBOX_5 : return "CASSETTE LISTBOX 5";
      case GUI_BUTTON_DYNAMIC_LISTBOX_1 : return "DYNAMIC LISTBOX 1";
      case GUI_BUTTON_DYNAMIC_LISTBOX_2 : return "DYNAMIC LISTBOX 2";
      case GUI_BUTTON_DYNAMIC_LISTBOX_3 : return "DYNAMIC LISTBOX 3";
      case GUI_BUTTON_DYNAMIC_LISTBOX_4 : return "DYNAMIC LISTBOX 4";
      case GUI_BUTTON_DYNAMIC_LISTBOX_5 : return "DYNAMIC LISTBOX 5";
      case GUI_BUTTON_CONFIG_LANGUAGE : return "CONFIG LANGUAGE";
      case GUI_BUTTON_CONFIG_PLASMA : return "CONFIG PLASMA";
      case GUI_BUTTON_CONFIG_RBC : return "CONFIG RBC";
      case GUI_BUTTON_CONFIG_PROCEDURE : return "CONFIG PROCEDURE";
      case GUI_BUTTON_CONFIG_DONOR : return "CONFIG DONOR";
      case GUI_BUTTON_CONFIG_VOLUME_LIMITS : return "CONFIG VOLUME LIMITS";
      case GUI_BUTTON_CONFIG_PLATELET : return "CONFIG PLATELET";
      case GUI_BUTTON_CONFIG_SERVICE : return "CONFIG SERVICE";
      case GUI_BUTTON_CONFIG_PRIORITY : return "CONFIG PRIORITY";
      case GUI_BUTTON_CONFIG_MACHINE_SET_ID : return "CONFIG MACHINE SET ID";
      case GUI_BUTTON_CONFIG_MACHINE_SET_CODE : return "CONFIG MACHINE SET CODE";
      case GUI_BUTTON_CONFIG_MACHINE_SET_AUDIO : return "CONFIG MACHINE SET AUDIO";
      case GUI_BUTTON_CONFIG_MACHINE_ADD_SET : return "CONFIG MACHINE ADD SET";
      case GUI_BUTTON_CONFIG_MACHINE_REMOVE_SET : return "CONFIG MACHINE REMOVE SET";
      case GUI_BUTTON_CONFIG_METERED_STORAGE_SOLUTION : return "CONFIG METERED STORAGE SOLUTION";
      case GUI_BUTTON_CONFIG_PLT_MSS_SPLIT_NOTIF : return "CONFIG PLT MSS SPLIT NOTIF";
      case GUI_BUTTON_CONFIG_SHOW_RESIDUAL_LOSS : return "CONFIG SHOW RESIDUAL LOSS";
      case GUI_BUTTON_CONFIG_OVERRIDE_PAS_BAG_VOL : return "CONFIG OVERRIDE PAS BAG VOL";
      case GUI_BUTTON_CONFIG_REPLACEMENT_FLUID : return "CONFIG REPLACEMENT FLUID";
      case GUI_BUTTON_CONFIG_SELECT_LANGUAGE : return "CONFIG SELECT LANGUAGE";
      case GUI_BUTTON_CONFIG_HEIGHT : return "CONFIG HEIGHT";
      case GUI_BUTTON_CONFIG_WEIGHT : return "CONFIG WEIGHT";
      case GUI_BUTTON_CONFIG_DATE_FORMAT : return "CONFIG DATE FORMAT";
      case GUI_BUTTON_CONFIG_TIME_FORMAT : return "CONFIG TIME FORMAT";
      case GUI_BUTTON_CONFIG_DECIMAL_DELIMITER : return "CONFIG DECIMAL DELIMITER";
      case GUI_BUTTON_CONFIG_CRIT_OR_GLOB : return "CONFIG RBC UNIT (CRIT OR HEMOGLOBIN)";
      case GUI_BUTTON_CONFIG_PP_LABEL_BOX_1 : return "CONFIG PP LABEL BOX 1";
      case GUI_BUTTON_CONFIG_PP_LABEL_LINE_1 : return "CONFIG PP LABEL LINE 1";
      case GUI_BUTTON_CONFIG_PP_PLATELETS_1 : return "CONFIG PP PLATELETS 1";
      case GUI_BUTTON_CONFIG_PP_PLASMA_1 : return "CONFIG PP PLASMA 1";
      case GUI_BUTTON_CONFIG_PP_RBC_1 : return "CONFIG PP RBC 1";
      case GUI_BUTTON_CONFIG_PP_TYPE_1 : return "CONFIG PP TYPE 1";
      case GUI_BUTTON_CONFIG_PP_TIME_1 : return "CONFIG PP TIME 1";
      case GUI_BUTTON_CONFIG_PP_LABEL_BOX_2 : return "CONFIG PP LABEL BOX 2";
      case GUI_BUTTON_CONFIG_PP_LABEL_LINE_2 : return "CONFIG PP LABEL LINE 2";
      case GUI_BUTTON_CONFIG_PP_PLATELETS_2 : return "CONFIG PP PLATELETS 2";
      case GUI_BUTTON_CONFIG_PP_PLASMA_2 : return "CONFIG PP PLASMA 2";
      case GUI_BUTTON_CONFIG_PP_RBC_2 : return "CONFIG PP RBC 2";
      case GUI_BUTTON_CONFIG_PP_TYPE_2 : return "CONFIG PP TYPE 2";
      case GUI_BUTTON_CONFIG_PP_TIME_2 : return "CONFIG PP TIME 2";
      case GUI_BUTTON_CONFIG_PP_LABEL_BOX_3 : return "CONFIG PP LABEL BOX 3";
      case GUI_BUTTON_CONFIG_PP_LABEL_LINE_3 : return "CONFIG PP LABEL LINE 3";
      case GUI_BUTTON_CONFIG_PP_PLATELETS_3 : return "CONFIG PP PLATELETS 3";
      case GUI_BUTTON_CONFIG_PP_PLASMA_3 : return "CONFIG PP PLASMA 3";
      case GUI_BUTTON_CONFIG_PP_RBC_3 : return "CONFIG PP RBC 3";
      case GUI_BUTTON_CONFIG_PP_TYPE_3 : return "CONFIG PP TYPE 3";
      case GUI_BUTTON_CONFIG_PP_TIME_3 : return "CONFIG PP TIME 3";
      case GUI_BUTTON_CONFIG_DONOR_AC_RATE : return "CONFIG DONOR AC RATE";
      case GUI_BUTTON_CONFIG_DONOR_POST_CRIT : return "CONFIG DONOR POST HEMATOCRIT";
      case GUI_BUTTON_CONFIG_DONOR_POST_PLAT : return "CONFIG DONOR POST PLATELET";
      case GUI_BUTTON_CONFIG_DONOR_VOLUME : return "CONFIG DONOR VOLUME";

#if 1
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT : return "CONFIG DONOR WEIGHT";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_LESS_THAN_VOL : return "CONFIG DONOR WEIGHT LESS THAN VOLUME";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_GREATER_THAN_VOL : return "CONFIG DONOR WEIGHT GREATER THAN VOLUME";
#else
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_1 : return "CONFIG DONOR WEIGHT 1";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_2 : return "CONFIG DONOR WEIGHT 2";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_3 : return "CONFIG DONOR WEIGHT 3";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_1_LESS_THAN_VOL : return "CONFIG DONOR WEIGHT 1 LESS THAN VOLUME";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_2_LESS_THAN_VOL : return "CONFIG DONOR WEIGHT 2 LESS THAN VOLUME";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_3_LESS_THAN_VOL : return "CONFIG DONOR WEIGHT 3 LESS THAN VOLUME";
      case GUI_BUTTON_CONFIG_DONOR_WEIGHT_3_GREATER_THAN_VOL : return "CONFIG DONOR WEIGHT 3 GREATER THAN VOLUME";
#endif

      case GUI_BUTTON_CONFIG_DONOR_TBV : return "CONFIG DONOR TBV";
      case GUI_BUTTON_CONFIG_DONOR_TBV_PERCENT : return "CONFIG DONOR TBV PERCENT";
      case GUI_BUTTON_CONFIG_DONOR_BODY_WEIGHT : return "CONFIG DONOR BODY WEIGHT";
      case GUI_BUTTON_CONFIG_DONOR_ML_PER_KG : return "CONFIG DONOR ML PER KG";
      case GUI_BUTTON_CONFIG_DONOR_BODY_VOL : return "CONFIG DONOR BODY VOL";
      case GUI_BUTTON_CONFIG_DONOR_PLATELET_VOL_MAX : return "CONFIG DONOR PLATELET VOL MAX";
      case GUI_BUTTON_CONFIG_DONOR_PLASMA_VOL_MAX : return "CONFIG DONOR PLASMA VOL MAX";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_1 : return "CONFIG PLASMA VOLUME 1";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_2 : return "CONFIG PLASMA VOLUME 2";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_3 : return "CONFIG PLASMA VOLUME 3";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_4 : return "CONFIG PLASMA VOLUME 4";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_5 : return "CONFIG PLASMA VOLUME 5";
      case GUI_BUTTON_CONFIG_PLS_VOLUME_6 : return "CONFIG PLASMA VOLUME 6";
      case GUI_BUTTON_CONFIG_PLS_AMAP_MIN : return "CONFIG PLASMA AMAP MINIMUM";
      case GUI_BUTTON_CONFIG_PLS_AMAP_MAX : return "CONFIG PLASMA AMAP MAXIMUM";
      case GUI_BUTTON_CONFIG_PLT_LABEL_BOX : return "CONFIG PLATELET LABEL BOX";
      case GUI_BUTTON_CONFIG_PLT_LABEL_LINE : return "CONFIG PLATELET LABEL LINE";
      case GUI_BUTTON_CONFIG_YSF : return "CONFIG YSF";
      case GUI_BUTTON_CONFIG_PLT_PROD_1 : return "CONFIG PLT PROD 1";
      case GUI_BUTTON_CONFIG_PLT_YIELD_1 : return "CONFIG PLT YIELD 1";
      case GUI_BUTTON_CONFIG_PLT_FINAL_CONC_1 : return "CONFIG PLT FINAL CONC 1";
      case GUI_BUTTON_CONFIG_PLT_PAS_TOGGLE_1 : return "CONFIG PLT PAS TOGGLE 1";
      case GUI_BUTTON_CONFIG_PLT_PLASMA_PERCENT_1 : return "CONFIG PLT PLASMA PERCENT 1";
      case GUI_BUTTON_CONFIG_PLT_VOL_1 : return "CONFIG PLT VOL 1";
      case GUI_BUTTON_CONFIG_PLT_PROD_2 : return "CONFIG PLT PROD 2";
      case GUI_BUTTON_CONFIG_PLT_YIELD_2 : return "CONFIG PLT YIELD 2";
      case GUI_BUTTON_CONFIG_PLT_FINAL_CONC_2 : return "CONFIG PLT FINAL CONC 2";
      case GUI_BUTTON_CONFIG_PLT_PAS_TOGGLE_2 : return "CONFIG PLT PAS TOGGLE 2";
      case GUI_BUTTON_CONFIG_PLT_PLASMA_PERCENT_2 : return "CONFIG PLT PLASMA PERCENT 2";
      case GUI_BUTTON_CONFIG_PLT_VOL_2 : return "CONFIG PLT VOL 2";
      case GUI_BUTTON_CONFIG_PLT_PROD_3 : return "CONFIG PLT PROD 3";
      case GUI_BUTTON_CONFIG_PLT_YIELD_3 : return "CONFIG PLT YIELD 3";
      case GUI_BUTTON_CONFIG_PLT_FINAL_CONC_3 : return "CONFIG PLT FINAL CONC 3";
      case GUI_BUTTON_CONFIG_PLT_PAS_TOGGLE_3 : return "CONFIG PLT PAS TOGGLE 3";
      case GUI_BUTTON_CONFIG_PLT_PLASMA_PERCENT_3 : return "CONFIG PLT PLASMA PERCENT 3";
      case GUI_BUTTON_CONFIG_PLT_VOL_3 : return "CONFIG PLT VOL 3";
      case GUI_BUTTON_CONFIG_PROCEDURE_TIME : return "CONFIG PROCEDURE TIME";
      case GUI_BUTTON_CONFIG_RETURN_PRESSURE : return "CONFIG RETURN PRESSURE";
      case GUI_BUTTON_CONFIG_DRAW_PRESSURE : return "CONFIG DRAW PRESSURE";
      case GUI_BUTTON_CONFIG_CUSTOM_RATIO : return "CONFIG CUSTOM RATIO";
      case GUI_BUTTON_CONFIG_PLASMA_RATIO : return "CONFIG PLASMA RATIO";
      case GUI_BUTTON_CONFIG_RBC_LABEL_LINE_1 : return "CONFIG RBC LABEL LINE 1";
      case GUI_BUTTON_CONFIG_RBC_PROD_1 : return "CONFIG RBC PROD 1";
      case GUI_BUTTON_CONFIG_RBC_CRIT_1 : return "CONFIG RBC CRIT 1";
      case GUI_BUTTON_CONFIG_RBC_DOSE_1 : return "CONFIG RBC DOSE 1";
      case GUI_BUTTON_CONFIG_RBC_VOLUME_1 : return "CONFIG RBC VOLUME 1";
      case GUI_BUTTON_CONFIG_RBC_LABEL_LINE_2 : return "CONFIG RBC LABEL LINE 2";
      case GUI_BUTTON_CONFIG_RBC_PROD_2 : return "CONFIG RBC PROD 2";
      case GUI_BUTTON_CONFIG_RBC_CRIT_2 : return "CONFIG RBC CRIT 2";
      case GUI_BUTTON_CONFIG_RBC_DOSE_2 : return "CONFIG RBC DOSE 2";
      case GUI_BUTTON_CONFIG_RBC_VOLUME_2 : return "CONFIG RBC VOLUME 2";
      case GUI_BUTTON_CONFIG_RBC_LABEL_LINE_3 : return "CONFIG RBC LABEL LINE 3";
      case GUI_BUTTON_CONFIG_RBC_PROD_3 : return "CONFIG RBC PROD 3";
      case GUI_BUTTON_CONFIG_RBC_CRIT_3 : return "CONFIG RBC CRIT 3";
      case GUI_BUTTON_CONFIG_RBC_DOSE_3 : return "CONFIG RBC DOSE 3";
      case GUI_BUTTON_CONFIG_RBC_VOLUME_3 : return "CONFIG RBC VOLUME 3";
      case GUI_BUTTON_CONFIG_RBC_RATIO : return "CONFIG RBC RATIO";
      case GUI_BUTTON_CONFIG_RBC_REPLACE_FLUID : return "CONFIG RBC REPLACE FLUID";
      case GUI_BUTTON_CONFIG_RBC_FLUID_PERCENT : return "CONFIG RBC FLUID PERCENT";
      case GUI_BUTTON_CONFIG_DRBC_ALERT : return "CONFIG DRBC ALERT";
      case GUI_BUTTON_CONFIG_MIN_REPLACE_VOL : return "CONFIG MINIMUM REPLACEMENT VOLUME";
      case GUI_BUTTON_CONFIG_MAX_DRAW_FLOW : return "CONFIG MAX DRAW FLOW";
      case GUI_BUTTON_CONFIG_MACHINE_SET_TIME : return "CONFIG MACHINE SET TIME";
      case GUI_BUTTON_CONFIG_MACHINE_SET_DATE : return "CONFIG MACHINE SET DATE";
      case GUI_BUTTON_CONFIG_INLET_MANAGEMENT : return "CONFIG INLET MANAGEMENT";
      case GUI_BUTTON_CONFIG_RETURN_MANAGEMENT : return "CONFIG RETURN MANAGEMENT";
      case GUI_BUTTON_CONFIG_INLET_FLOW_RAMP : return "CONFIG INLET FLOW RAMP";
      case GUI_BUTTON_CONFIG_RSF : return "CONFIG RSF";
      case GUI_BUTTON_CONFIG_PLASMA_RINSEBACK : return "CONFIG PLASMA RINSEBACK";
      case GUI_BUTTON_CONFIG_SALINE_RINSEBACK : return "CONFIG SALINE RINSEBACK";
      case GUI_BUTTON_CONFIG_BLOOD_DIVERSION : return "CONFIG BLOOD DIVERSION";
      case GUI_BUTTON_CONFIG_AIR_REMOVAL : return "CONFIG AIR REMOVAL";
      case GUI_BUTTON_CONFIG_PPC_ON_OFF : return "CONFIG PPC ON OFF";
      case GUI_BUTTON_CONFIG_RBC_SOL_TOGGLE : return "CONFIG RBC SOL TOGGLE";
      case GUI_BUTTON_CONFIG_PTF_TOGGLE : return "CONFIG PTF TOGGLE";
      case GUI_BUTTON_CONFIG_DEFAULT_PLT_SS_BAG_VOLM : return "CONFIG DEFAULT PLT SS BAG VOLM";
      case GUI_BUTTON_CONFIG_PLASMA_CARRYOVER : return "CONFIG PLASMA CARRYOVER PERCENT";
      case GUI_BUTTON_CONFIG_PLASMA_CARRYOVER_VALUE : return "CONFIG PLASMA CARRYOVER PERCENT VALUE";
      case GUI_BUTTON_CONFIG_LISTBOX_UP_BUTTON : return "CONFIG LISTBOX UP BUTTON";
      case GUI_BUTTON_CONFIG_LISTBOX_DOWN_BUTTON : return "CONFIG LISTBOX DOWN BUTTON";
      case GUI_BUTTON_CONFIG_COMPLEMENTARY_PLASMA : return "CONFIG COMPLEMENTARY PLASMA BUTTON";
      case GUI_BUTTON_CASSETTE_LISTBOX_UP_BUTTON : return "CASSSETTE LISTBOX UP BUTTON";
      case GUI_BUTTON_CASSETTE_LISTBOX_DOWN_BUTTON : return "CASSSETTE LISTBOX DOWN BUTTON";
      case GUI_BUTTON_DYNAMIC_LISTBOX_UP_BUTTON : return "DYNAMIC LISTBOX UP BUTTON";
      case GUI_BUTTON_DYNAMIC_LISTBOX_DOWN_BUTTON : return "DYNAMIC LISTBOX DOWN BUTTON";
      // case GUI_SERVICE_MAIN_BTN: return "SERVICE MAIN BUTTON";
      case GUI_BUTTON_CHOOSE_CASSETTE : return "CHOOSE CASSETTE";
      case GUI_BUTTON_SETID_PLT_PLS : return "SET ID PLATELET/PLASMA";
      case GUI_BUTTON_SETID_PLT_PLS_RBC : return "SET ID PLATELET/PLASMA/RBC";
      case GUI_BUTTON_SETID_RBC_PLS : return "SET ID RBC/PLASMA";
      case GUI_BUTTON_SETID_LOAD_NEW : return "SET ID LOAD NEW";
      case GUI_BUTTON_REPFLUID_CONTINUE : return "REPLACEMENT FLUID CONTINUE";
      case GUI_BUTTON_REPFLUID_CANCEL : return "REPLACEMENT FLUID CANCEL";
      case GUI_BUTTON_REPFLUID_RINSEBACK : return "REPLACEMENT FLUID RINSEBACK";
      case GUI_BUTTON_DRBC_SPLIT_CONTINUE : return "DRBC SPLIT CONTINUE";
      case GUI_BUTTON_DRBC_SPLIT_CANCEL : return "DRBC SPLIT CANCEL";
      case GUI_BUTTON_PAS_EMPTY_CONTINUE : return "PAS EMPTY CONTINUE";
      case GUI_BUTTON_PAS_EMPTY_CANCEL : return "PAS EMPTY CANCEL";
      case GUI_BUTTON_PRODVERIF_1 : return "PRODUCT VERIFY 1";
      case GUI_BUTTON_PRODVERIF_2 : return "PRODUCT VERIFY 2";
      case GUI_BUTTON_PRODVERIF_3 : return "PRODUCT VERIFY 3";
      case GUI_BUTTON_PRODVERIF_4 : return "PRODUCT VERIFY 4";
      case GUI_BUTTON_PRODVERIF_5 : return "PRODUCT VERIFY 5";
      case GUI_BUTTON_PRODVERIF_6 : return "PRODUCT VERIFY 6";
      case GUI_BUTTON_BARCODE_CAT_NOTE : return "BARCODE CAT NOTE";
      case GUI_BUTTON_BARCODE_CAT_AC : return "BARCODE CAT AC";
      case GUI_BUTTON_BARCODE_CAT_REPLACEMENT_FLUID : return "BARCODE CAT REPLACEMENT FLUID";
      case GUI_BUTTON_BARCODE_CAT_DONOR : return "BARCODE CAT DONOR";
      case GUI_BUTTON_BARCODE_CAT_DONATION_ID : return "BARCODE CAT DONATION ID";
      case GUI_BUTTON_BARCODE_CAT_OPERATOR : return "BARCODE CAT OPERATOR";
      case GUI_BUTTON_BARCODE_CAT_SAMPLE_BAG : return "BARCODE CAT SAMPLE BAG";
      case GUI_BUTTON_BARCODE_CAT_RBC_STORAGE_SOL : return "BARCODE CAT RBC STORAGE SOL";
      case GUI_BUTTON_BARCODE_CAT_PLT_STORAGE_SOL : return "BARCODE CAT PLT STORAGE SOL";
      case GUI_BUTTON_BARCODE_CAT_BLOOD_TUBING_SET : return "BARCODE CAT BLOOD TUBING SET";
      case GUI_BUTTON_BARCODE_CAT_DATA : return "BARCODE CAT DATA";
      case GUI_BUTTON_BARCODE_CAT_MISC1 : return "BARCODE CAT MISC 1";
      case GUI_BUTTON_BARCODE_CAT_MISC2 : return "BARCODE CAT MISC 2";
      case GUI_BUTTON_BARCODE_CAT_MISC3 : return "BARCODE CAT MISC 3";
      case GUI_BUTTON_BARCODE_CAT_MISC4 : return "BARCODE CAT MISC 4";
      case GUI_BUTTON_BARCODE_CAT_MISC5 : return "BARCODE CAT MISC 5";
      case GUI_BUTTON_BARCODE_RANK_SWITCH : return "BARCODE RANK SWITCH";
      case GUI_BUTTON_BARCODE_INPUT_CLEAR : return "BARCODE INPUT CLEAR";
      case GUI_BUTTON_BARCODE_CATEGORY_CLEAR : return "BARCODE CATEGORY CLEAR";
      case GUI_BUTTON_CFR_SELECTED : return "CFR SELECTED";
      case GUI_BUTTON_CFR_CLEAR_BADGE : return "CFR CLEAR BADGE";
      case GUI_BUTTON_CFR_SCROLL_UP : return "CFR SCROLL UP";
      case GUI_BUTTON_CFR_SCROLL_DN : return "CFR SCROLL DOWN";
      case GUI_BUTTON_CFR_LIST_1 : return "CFR LIST 1";
      case GUI_BUTTON_CFR_LIST_2 : return "CFR LIST 2";
      case GUI_BUTTON_CFR_LIST_3 : return "CFR LIST 3";
      case GUI_BUTTON_CFR_LIST_4 : return "CFR LIST 4";
      case GUI_BUTTON_RUNSUMMARY2_RESET_MACHINE : return "RESET BUTTON";
      case GUI_BUTTON_CONFIG_PLT_PCT_PLAS_CO : return "CONFIG PLT PERCENT PLASMA CARRYOVER";
      case GUI_BUTTON_MSS_BAG_VOL_PLAT : return "MSS BAG VOL PLAT";
      case GUI_BUTTON_MSS_BAG_VOL_RBC : return "MSS BAG VOL RBC";
      case GUI_BUTTON_CONFIRM_BOX_CONFIRM : return "CONFIRM BOX CONFIRM";
      case GUI_BUTTON_CONFIRM_BOX_CANCEL : return "CONFIRM BOX CANCEL";
      case GUI_BUTTON_CONFIG_SHOW_PRE_AAS_FLAGS : return "CONFIG SHOW PRE AAS FLAGS";
      case GUI_BUTTON_CONFIG_MALE_ONLY_PLT : return "CONFIG MALE-ONLY PLT";
      case GUI_BUTTON_CONFIG_MALE_ONLY_PLASMA : return "CONFIG MALE-ONLY PLASMA";
      case GUI_BUTTON_CONFIG_FFP_VOLUME : return "CONFIG FFP VOLUME";
      case GUI_BUTTON_SERVICE_TOUCHSCREEN_CAL : return "SERVICE TOUCHSCREEN CAL";
      case GUI_BUTTON_CFG_LANG : return "CONFIG LANGUAGE";
      case GUI_BUTTON_DON_CONF_REVITALS : return "DONOR CONFIRM REENTER VITALS";
      case GUI_BUTTON_CONFIG_DRBC_VOL_LIM : return "CONFIG DRBC VOL LIM";
      case GUI_BUTTON_CONFIG_PLATELET_VOL_MAX_TOGGLE : return "CONFIG PLATELET VOL MAX TOGGLE";
      case GUI_BUTTON_CONFIG_PLASMA_VOL_MAX_TOGGLE : return "CONFIG PLASMA VOL MAX TOGGLE";

      // new for AMAP plt
      case GUI_BUTTON_CFG_PLT_AMAP_SINGLE_MIN : return "CONFIG AMAP PLT SINGLE MIN";
      case GUI_BUTTON_CFG_PLT_AMAP_SINGLE_MAX :   return "CONFIG AMAP PLT SINGLE MAX";
      case GUI_BUTTON_CFG_PLT_AMAP_DOUBLE_MIN :  return "CONFIG AMAP PLT DOUBLE MIN";
      case GUI_BUTTON_CFG_PLT_AMAP_DOUBLE_MAX :  return "CONFIG AMAP PLT DOUBLE MAX";
      case GUI_BUTTON_CFG_PLT_AMAP_TRIPLE_MIN :  return "CONFIG AMAP PLT TRIPLE MIN";
      case GUI_BUTTON_CFG_PLT_AMAP_TRIPLE_MAX :  return "CONFIG AMAP PLT TRIPLE MAX";
      case GUI_BUTTON_CFG_PLT_AMAP_SINGLE_CONC : return "CONFIG AMAP PLT SINGLE CONCENTRATION";
      case GUI_BUTTON_CFG_PLT_AMAP_DOUBLE_CONC : return "CONFIG AMAP PLT DOUBLE CONCENTRATION";
      case GUI_BUTTON_CFG_PLT_AMAP_TRIPLE_CONC : return "CONFIG AMAP PLT DOUBLE CONCENTRATION";
      case GUI_BUTTON_SELECT_DIFFERENT_PRODUCT : return "SELECT DIFFERENT PRODUCT";
      case GUI_BUTTON_PREDICT_MORE_OR_LESS :     return "PREDICT MORE OR LESS";
      case GUI_BUTTON_DON_CONN_START_DRAW :      return "DON CONN START DRAW";

      case GUI_BUTTON_CONFIG_SOFT_OPTION :     return "CONFIG SOFT OPTION";

      case GUI_BUTTON_CONFIG_SOFT_OPTION_KEYBOARD : return "GUI_BUTTON_CONFIG_SOFT_OPTION_KEYBOARD";
      case GUI_BUTTON_CONFIG_SOFT_OPTION_UP : return "GUI_BUTTON_CONFIG_SOFT_OPTION_UP";
      case GUI_BUTTON_CONFIG_SOFT_OPTION_DN : return "GUI_BUTTON_CONFIG_SOFT_OPTION_DN";


      case GUI_BUTTON_KEYBOARD_0 : return "GUI_BUTTON_KEYBOARD_0";
      case GUI_BUTTON_KEYBOARD_1 : return "GUI_BUTTON_KEYBOARD_1";
      case GUI_BUTTON_KEYBOARD_2 : return "GUI_BUTTON_KEYBOARD_2";
      case GUI_BUTTON_KEYBOARD_3 : return "GUI_BUTTON_KEYBOARD_3";
      case GUI_BUTTON_KEYBOARD_4 : return "GUI_BUTTON_KEYBOARD_4";
      case GUI_BUTTON_KEYBOARD_5 : return "GUI_BUTTON_KEYBOARD_5";
      case GUI_BUTTON_KEYBOARD_6 : return "GUI_BUTTON_KEYBOARD_6";
      case GUI_BUTTON_KEYBOARD_7 : return "GUI_BUTTON_KEYBOARD_7";
      case GUI_BUTTON_KEYBOARD_8 : return "GUI_BUTTON_KEYBOARD_8";
      case GUI_BUTTON_KEYBOARD_9 : return "GUI_BUTTON_KEYBOARD_9";
      case GUI_BUTTON_KEYBOARD_A : return "GUI_BUTTON_KEYBOARD_A";
      case GUI_BUTTON_KEYBOARD_B : return "GUI_BUTTON_KEYBOARD_B";
      case GUI_BUTTON_KEYBOARD_C : return "GUI_BUTTON_KEYBOARD_C";
      case GUI_BUTTON_KEYBOARD_D : return "GUI_BUTTON_KEYBOARD_D";
      case GUI_BUTTON_KEYBOARD_E : return "GUI_BUTTON_KEYBOARD_E";
      case GUI_BUTTON_KEYBOARD_F : return "GUI_BUTTON_KEYBOARD_F";
      case GUI_BUTTON_KEYBOARD_G : return "GUI_BUTTON_KEYBOARD_G";
      case GUI_BUTTON_KEYBOARD_H : return "GUI_BUTTON_KEYBOARD_H";
      case GUI_BUTTON_KEYBOARD_I : return "GUI_BUTTON_KEYBOARD_I";
      case GUI_BUTTON_KEYBOARD_J : return "GUI_BUTTON_KEYBOARD_J";
      case GUI_BUTTON_KEYBOARD_K : return "GUI_BUTTON_KEYBOARD_K";
      case GUI_BUTTON_KEYBOARD_L : return "GUI_BUTTON_KEYBOARD_L";
      case GUI_BUTTON_KEYBOARD_M : return "GUI_BUTTON_KEYBOARD_M";
      case GUI_BUTTON_KEYBOARD_N : return "GUI_BUTTON_KEYBOARD_N";
      case GUI_BUTTON_KEYBOARD_O : return "GUI_BUTTON_KEYBOARD_O";
      case GUI_BUTTON_KEYBOARD_P : return "GUI_BUTTON_KEYBOARD_P";
      case GUI_BUTTON_KEYBOARD_Q : return "GUI_BUTTON_KEYBOARD_Q";
      case GUI_BUTTON_KEYBOARD_R : return "GUI_BUTTON_KEYBOARD_R";
      case GUI_BUTTON_KEYBOARD_S : return "GUI_BUTTON_KEYBOARD_S";
      case GUI_BUTTON_KEYBOARD_T : return "GUI_BUTTON_KEYBOARD_T";
      case GUI_BUTTON_KEYBOARD_U : return "GUI_BUTTON_KEYBOARD_U";
      case GUI_BUTTON_KEYBOARD_V : return "GUI_BUTTON_KEYBOARD_V";
      case GUI_BUTTON_KEYBOARD_W : return "GUI_BUTTON_KEYBOARD_W";
      case GUI_BUTTON_KEYBOARD_X : return "GUI_BUTTON_KEYBOARD_X";
      case GUI_BUTTON_KEYBOARD_Y : return "GUI_BUTTON_KEYBOARD_Y";
      case GUI_BUTTON_KEYBOARD_Z : return "GUI_BUTTON_KEYBOARD_Z";
      case GUI_BUTTON_KEYBOARD_BK : return "GUI_BUTTON_KEYBOARD_BK";
      case GUI_BUTTON_KEYBOARD_CLR : return "GUI_BUTTON_KEYBOARD_CLR";
      case GUI_BUTTON_KEYBOARD_CR : return "GUI_BUTTON_KEYBOARD_CR";

      case GUI_BUTTON_PLTSPLIT_UNLOAD :    return "PLTSPLIT UNLOAD";
      case GUI_BUTTON_JP_PLS_CLAMP_UNLOAD : return "GUI BUTTON JP PLS CLAMP_UNLOAD";

      case GUI_BUTTON_PRED_AF_ADJUST : return "AF PREDICT ADJUST";
      case GUI_BUTTON_PRED_AF_MUTE :   return "AF PREDICT MUTE";
      case GUI_BUTTON_CFG_AUTOFLOW : return "CFG BUTTON AUTOFLOW";





   #if CPU==SIMNT
      case GUI_BUTTON_TOTAL_BUTTONS : return "TOTAL BUTTONS. NOT REALLY A BUTTON";
    #endif /* CPU=SIMNT */

      case GUI_BUTTON_INVALID : return "GUI BUTTON INVALID (something is wrong)";

      default : return "UNKNOWN";
   }

   return "";
}


DataLog_Stream& operator << (DataLog_Stream& os, GUI_SCREEN_ID id)
{
   os << scrnIdToStr(id) << "(" << dec << (int)id << ")";

   return os;
}

DataLog_Stream& operator << (DataLog_Stream& os, GUI_BUTTON_ID id)
{
   os << btnIdToStr(id) << "(" << dec << (int)id << ")";

   return os;
}

/* FORMAT HASH 2f4feee26718aa9404967f3790f62cd4 */
