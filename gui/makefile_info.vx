################################################################################
#
# Makefile for GUI info:
#   By info, I mean this is the makefile that deals
#   with generating source from the string.info and
#   bitmap.info source files.  It also deals with the
#   font info and checking the string info CRCs.
#
################################################################################

.PHONY: all
ifeq ($(BUILD_TYPE),CLEAN)
all: clean
else
all: bitmaps crcs_ok strings fonts
endif

#
# MAINDIR should be set to the relative path from this makefile directory
# to the base trima project directory.  MAINDIR must use \ (DOS/Windows
# style) directory separators if they are needed.
#
MAINDIR = ..
TRIMA_COMMON_DIR = $(MAINDIR)/trima_common
FEATURESDIR      = $(MAINDIR)/cds
ENGRTOOLSDIR     = $(MAINDIR)/engr_tools
GUITOOLSDIR      = $(ENGRTOOLSDIR)/guiTools
BUILDSTRINGDIR   = $(GUITOOLSDIR)/buildStringInfo
BUILDBITMAPDIR   = $(GUITOOLSDIR)/buildBitmapInfo/Release
BM_INFO_EXE      = $(subst /,\,$(BUILDBITMAPDIR)/buildBitmapInfo)
CRCGENDIR        = $(GUITOOLSDIR)/stringCrcGen/Release
CRCGENEXE        = $(subst /,\,$(CRCGENDIR))\stringCrcGen

ADDN_INCDIR      = -I$(TRIMA_COMMON_DIR) -I$(FEATURESDIR)

include $(MAINDIR)/makefile.vxc

# List of string files to include: $(LANGS)
include $(MAINDIR)/gui/stringFiles.vx

ADDN_ASFLAGS  = -Os
ADDN_CPPFLAGS = -Os
ADDN_CCFLAGS  = -Os
ADDN_CXXFLAGS = -Os

# These files are generated by $(BM_INFO_EXE)
BM_INFO_OUTPUT = bitmap_info.cpp \
                 bitmap_info_id.h \
                 bitmap_logging.cpp \
                 .dfile/bitmap_info_cpp.d

# These files are generated by sed scripts
STRINGS_OUTPUT = string_id.h \
                 string_id.cpp \
                 string_data.h \
                 string_data.cpp \
                 feature_string_util.cpp 

#
# Bitmaps - Process bitmap.info using the engineering tools $(BM_INFO_EXE) utility
#
.PHONY: bitmaps

# Include the generated bitmap depenencies file
# 
ifneq ($(BUILD_TYPE),CLEAN)
-include .dfile/bitmap_info_cpp.d
endif

bitmaps: $(BM_INFO_OUTPUT)

# The BM_INFO_OUTPUT files are generated all together. For parallel makes, only
# need to invoke the utility once. Enforce this by making one of the .cpp files
# a prerequisite of the others
#
bitmap_info.cpp : bitmap.info | .dfile
	@echo x Generating bitmap files: $(BASEDIR)/$@
	$(Q)cmd /c $(BM_INFO_EXE) ./ $(MAINDIR)/focgui/newart/

# Use this recipe to generate the other files only when they are really missing
#
bitmap_logging.cpp bitmap_info_id.h .dfile/bitmap_info_cpp.d : bitmap_info.cpp 
	@if not exist $@ echo x Generating bitmap files: $(BASEDIR)/$@
	@if not exist $@ $(Q)cmd /c $(BM_INFO_EXE) ./ $(MAINDIR)/focgui/newart/

#
# Strings - Process string.info using sed scripts in engineering tools
#
.PHONY: strings

strings: $(STRINGS_OUTPUT) 

string_id.h: $(LANGDIR)\string.info $(BUILDSTRINGDIR)\buildStringEnumH.sed
	$(Q)sed -n -f $(BUILDSTRINGDIR)\buildStringEnumH.sed < $(LANGDIR)\string.info > $@

string_id.cpp: string_id.h $(LANGDIR)\string.info $(BUILDSTRINGDIR)\buildStringEnumCpp.sed
	$(Q)sed -n -f $(BUILDSTRINGDIR)\buildStringEnumCpp.sed < $(LANGDIR)\string.info > $@

string_data.h: $(LANGDIR)\string.info $(BUILDSTRINGDIR)\buildStringDataH.sed
	$(Q)sed -n -f $(BUILDSTRINGDIR)\buildStringDataH.sed < $(LANGDIR)\string.info > $@

string_data.cpp: string_data.h $(LANGDIR)\string.info $(BUILDSTRINGDIR)\buildStringDataCpp1.sed $(BUILDSTRINGDIR)\buildStringDataCpp2.sed
	$(Q)sed -n -b -f $(BUILDSTRINGDIR)\buildStringDataCpp1.sed < $(LANGDIR)\string.info > $@
	$(Q)sed -n -f $(BUILDSTRINGDIR)\buildStringDataCpp2.sed < $(LANGDIR)\string.info >> $@

feature_string_util.cpp: string_id.h $(FEATURESDIR)/bool_features.txt $(FEATURESDIR)/build_bool_feature_string.sed
	$(Q)echo x Generating: $@
	$(Q)sed -n -f $(FEATURESDIR)/build_bool_feature_string.sed < $(FEATURESDIR)/bool_features.txt > $@

#
# Fonts - Deal with the font definitions.
#
.PHONY: fonts

fonts : $(CPU)/fontdefs.o

$(CPU)/fontdefs.o: fontdefs.cpp fontdefs.h $(TRIMA_COMMON_DIR)/filenames.h | $(CPU)

#
# crcs_ok - Verify that languageCrc values in the language files are valid
#
crcs_ok: crcgen.tmp $(addprefix $(LANGDIR)/,$(LANGS))
	@echo x Validating language CRCs for: $(strip $(LANGS)) 
	$(Q)awk -f check_crcs.awk $^ && touch $@
		
crcgen.tmp: $(addprefix $(LANGDIR)/,$(LANGS))
	$(Q)cmd /c $(CRCGENEXE) $^ > $@
	 
# Clean - Clear out generated source code and such.
#
.PHONY: clean
clean:
	$(Q)rm -f $(BM_INFO_OUTPUT)
	$(Q)rm -f $(STRINGS_OUTPUT)
	$(Q)rm -f crcgen.tmp crcs_ok

