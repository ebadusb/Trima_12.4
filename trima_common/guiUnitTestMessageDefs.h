/***********************************************************************************************
*
*	Copyright (c) 2007 by Gambro BCT, Inc.  All rights reserved.
*
*	TITLE:      guiUnitTestMessageDefs.h
*
*	AUTHOR:		Dan Slauson (x4664)
*
*	DESCRIPTION: This file should only get included if compiled for simulator.  It is a place
*	to store typedefs, enums, and structs that will be used both by GUI and the GUI unit test
*	software used with the simulator.  Kind of like guiproc.h, except not for the real software.
*
*	It's a good place to enumerate screen display types for the SimntTraverseEnumeratedScreens
*	message.  This is how it's most frequently used.
*
************************************************************************************************
*
*	$Header: E:/BCT_Development/Trima5.R/Trima/trima_common/rcs/guiUnitTestMessageDefs.h 1.21 2009/06/18 21:12:50Z dslausb Exp dslausb $
*
***************************************************************************************************/

#ifndef __GUI_UNIT_TEST_MESSAGE_DEFS_H__
#define __GUI_UNIT_TEST_MESSAGE_DEFS_H__

#include <map>
#include <string>

#include "message.h"

typedef enum
{
   RAS_CONNECT_TYPE_TWO_BAG_SET_TWO_BAGS_NEEDED,
   RAS_CONNECT_TYPE_TWO_BAG_SET_ONE_BAG_NEEDED,
   RAS_CONNECT_TYPE_ONE_BAG_SET,
   LAST_RAS_CONNECT_DISPLAY_TYPE = RAS_CONNECT_TYPE_ONE_BAG_SET
} RAS_CONNECT_DISPLAY_TYPE;

typedef enum
{
   AAS_RUNSUM_PTF_SRBC_SALVAGE_BOTH,
   AAS_RUNSUM_PTF_DRBC_SALVAGE_RAS,
   AAS_RUNSUM_PTF_SRBC_SALVAGE_RAS,
   AAS_RUNSUM_PTF_SRBC_SALVAGE_PAS,
   AAS_RUNSUM_NON_PTF_SALVAGE_PAS,
   AAS_RUNSUM_PTF_DRBC_NON_SALVAGE,
   AAS_RUNSUM_PTF_SRBC_NON_SALVAGE,
   AAS_RUNSUM_INST_DRBC_ABOVE,
   AAS_RUNSUM_INST_DRBC_BELOW,
   AAS_RUNSUM_INST_SRBC_BELOW,
   AAS_RUNSUM_INST_SRBC_ABOVE_WITH_PAS,
   AAS_RUNSUM_INST_SRBC_ABOVE,
   AAS_RUNSUM_INST_NO_SEAL,
   LAST_AAS_RUNSUM_VALUE = AAS_RUNSUM_INST_NO_SEAL
} ENUMERATED_AAS_RUNSUMM_DISPLAY_TYPE;

typedef enum
{
   ABORT_CONFIRM_NORMAL,
   ABORT_CONFIRM_AAS_NORMAL,
   ABORT_CONFIRM_AAS_WITH_END_RAS,
   ABORT_CONFIRM_AAS_WITH_END_PAS,
   ABORT_CONFIRM_AAS_WITH_END_ANY,
   ABORT_CONFIRM_RINSEBACK,
   ABORT_CONFIRM_SPILLOVER,
   ABORT_CONFIRM_AIR_IN_PLASMA,
   LAST_ABORT_DISPLAY_TYPE = ABORT_CONFIRM_AIR_IN_PLASMA
} ABORT_CONFIRM_DISPLAY_TYPE;

typedef enum
{
   CHANNEL_CLAMP_WHITE_RAS,
   CHANNEL_CLAMP_WHITE_PAS,
   CHANNEL_CLAMP_WHITE_BOTH,
   CHANNEL_CLAMP_BLACK,
   LAST_CHANNEL_CLAMP_DISPLAY_TYPE = CHANNEL_CLAMP_BLACK
} CHANNEL_CLAMP_DISPLAY_TYPES;

typedef enum
{
   MSS_END_WHITE_RAS_SEAL,
   MSS_END_WHITE_RAS_REMOVE,
   MSS_END_WHITE_PAS_SEAL,
   MSS_END_WHITE_PAS_REMOVE,
   MSS_END_WHITE_BOTH_SEAL,
   MSS_END_WHITE_BOTH_REMOVE,
   MSS_END_BLACK_SEAL,
   MSS_END_BLACK_REMOVE,
   LAST_MSS_END_DISPLAY_TYPE = MSS_END_BLACK_REMOVE
} MSS_END_DISPLAY_TYPE;

typedef enum
{
   RS1_DISPLAY_TYPE_NO_FRILLS,
   RS1_DISPLAY_TYPE_RESIDUALS,
   RS1_DISPLAY_TYPE_PLASMA_RINSEBACK,
   RS1_DISPLAY_TYPE_SALINE_RINSEBACK,
   RS1_DISPLAY_TYPE_AAS_TIME,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_PLASMA_RINSEBACK,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_SALINE_RINSEBACK,
   RS1_DISPLAY_TYPE_AVG_INLET,
   RS1_DISPLAY_TYPE_AVG_INLET_AND_PLASMA_RINSEBACK,
   RS1_DISPLAY_TYPE_AVG_INLET_AND_SALINE_RINSEBACK,
   RS1_DISPLAY_TYPE_AVG_INLET_AND_AAS_TIME,
   RS1_DISPLAY_TYPE_RESIDUALS_AND_AAS_TIME,
   RS1_DISPLAY_TYPE_RESIDUALS_AND_INLET,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_INLET,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_INLET_AND_PLASMA_RINSEBACK,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_INLET_AND_SALINE_RINSEBACK,
   RS1_DISPLAY_TYPE_AAS_TIME_AND_INLET_AND_RESIDUALS,
   LAST_RS1_DISPLAY_TYPE = RS1_DISPLAY_TYPE_AAS_TIME_AND_INLET_AND_RESIDUALS
} RS1_DISPLAY_TYPE;

typedef enum
{
   SYSDISP_CASSETTE_LOWERING,
   SYSDISP_CASSETTE_LOWERED,
   SYSDISP_CASSETTE_EVACUATING,
   SYSDISP_CASSETTE_RAISING,
   SYSDISP_CASSETTE_RAISED,
   SYSDISP_CASSETTE_DONT_CONNECT_AC,
   SYSDISP_CLAMP_SAMPLE_BAG,
   SYSDISP_CLAMP_SAMPLE_BAG_JP,
   SYSDISP_CLAMP_PAS,
   SYSDISP_CLAMP_PAS_JP,
   LAST_SYSDISP_DISPLAY_TYPE = SYSDISP_CLAMP_PAS_JP
} SYSDISP_DISPLAY_TYPES;

typedef enum
{
   PTF_LOAD_WHITE_RAS,
   PTF_LOAD_WHITE_BOTH,
   PTF_LOAD_BLACK_RAS,
   PTF_LOAD_WHITE_RAS_JP,
   PTF_LOAD_WHITE_BOTH_JP,
   PTF_LOAD_BLACK_RAS_JP,
   LAST_PTF_LOAD_DISPLAY_TYPE = PTF_LOAD_BLACK_RAS_JP
} PTF_LOAD_DISPLAY_TYPES;

typedef enum
{
   DON_CONN_DIVERSION_OFF,
   DON_CONN_DIVERSION_ON,
   DON_CONN_DIVERSION_OFF_JP,
   DON_CONN_DIVERSION_ON_JP,
   LAST_DON_CONN_DISPLAY_TYPE = DON_CONN_DIVERSION_ON_JP
} DON_CONN_DISPLAY_TYPES;

typedef enum
{
   PAS_CONNECT_TYPE_OVERRIDE_ON,
   PAS_CONNECT_TYPE_OVERRIDE_OFF,
   LAST_PAS_CONNECT_DISPLAY_TYPE = PAS_CONNECT_TYPE_OVERRIDE_OFF
} PAS_CONNECT_DISPLAY_TYPES;

typedef enum
{
   DRBC_SPLIT_COLLECT_FILTERED,
   DRBC_SPLIT_COLLECT_NONFILTERED,
   DRBC_SPLIT_RAS_ADDITION,
   LAST_DRBC_SPLIT_DISPLAY_TYPE = DRBC_SPLIT_RAS_ADDITION
} DRBC_SPLIT_DISPLAY_TYPE;

typedef enum
{
   DISCONN_NON_MSS_1,
   DISCONN_NON_MSS_2,
   DISCONN_MSS,
   LAST_DISCONN_DISPLAY_TYPE = DISCONN_MSS
} DISCONN_DISPLAY_TYPE;

typedef enum
{
   RS2_DRBC,
   RS2_SRBC,
   LAST_RS2_DISPLAY_TYPE = RS2_SRBC
} RS2_DISPLAY_TYPE;

typedef enum
{
   PAS_INIT_SPLIT_NORMAL,
   PAS_INIT_SPLIT_JP,
   LAST_PAS_INIT_DISPLAY_TYPE = PAS_INIT_SPLIT_JP
} PAS_INIT_SPLIT_DISPLAY_TYPE;

typedef enum
{
   SYSCLAMP_KEY_AIR_REMOVAL,
   SYSCLAMP_NO_AIR_REMOVAL,
   SYSCLAMP_KEY_AIR_REMOVAL_JP,
   SYSCLAMP_NO_AIR_REMOVAL_JP,
   LAST_SYSCLAMP_DISPLAY_TYPE = SYSCLAMP_NO_AIR_REMOVAL_JP
} SYSCLAMP_DISPLAY_TYPE;

typedef enum
{
   SYSDONOR_DISPLAY_INITIAL,
   SYSDONOR_DISPLAY_VIP_DOWNLOADING,
   SYSDONOR_DISPLAY_DONINFO_DONE,
   SYSDONOR_DISPLAY_LOADSET_DONE,
   SYSDONOR_DISPLAY_LOADSET_DONE_AC_PRIME,
   SYSDONOR_DISPLAY_BOTH_DONE,
   LAST_SYSDONOR_DISPLAY_TYPE = SYSDONOR_DISPLAY_BOTH_DONE
} SYSDONOR_DISPLAY_TYPES;

typedef enum
{
   CONFIRM_DON_INFO_VERSION_MALE,
   CONFIRM_DON_INFO_VERSION_FEMALE,
   CONFIRM_DON_INFO_BLOOD_TYPE_OP,
   CONFIRM_DON_INFO_BLOOD_TYPE_ON,
   CONFIRM_DON_INFO_BLOOD_TYPE_AP,
   CONFIRM_DON_INFO_BLOOD_TYPE_AN,
   CONFIRM_DON_INFO_BLOOD_TYPE_BP,
   CONFIRM_DON_INFO_BLOOD_TYPE_BN,
   CONFIRM_DON_INFO_BLOOD_TYPE_ABP,
   CONFIRM_DON_INFO_BLOOD_TYPE_ABN,
   LAST_CONFIRM_DON_INFO_DISPLAY_TYPE = CONFIRM_DON_INFO_BLOOD_TYPE_ABN
} CONFIRM_DON_INFO_DISPLAY_TYPE;

typedef enum
{
   POWERDOWN_POWERING_DOWN,
   POWERDOWN_WATCHDOG_FAILURE,
   LAST_POWERDOWN_DISPLAY_TYPE = POWERDOWN_WATCHDOG_FAILURE
} POWERDOWN_DISPLAY_TYPE;

typedef enum
{
   // Generic universal traverse type.  For use in classes which only need one traverse.
   UNIVERSAL = 0,

   // Traverses specific to runsum_product.{hpp,cpp}
   CHANGE_LABELS,
   CHANGE_REASONS,

   // Traverses specific to runsumm2.{hpp,cpp}
   CHANGE_NEXT_PROCEDURE_BUTTON,

   // Traverses specific to predict.{hpp,cpp}
   SET_SHOW_FLOW_ADJUST,
   SET_SHOW_PLT_VOLUME,
   SET_SHOW_PLASMA,
   SET_SHOW_AMAP_PLT,


   // Traverses specific to sysacatt.{hpp,cpp}
   SET_SHOW_AC_ATTACH_CONFIRM,

   // Traverses specific to sysdonor.{hpp,cpp}
   SYSDONOR_UNIVERSAL,  // This replaces the normal UNIVERSAL type.  See sysdonor.cpp:handleTraverseMessage() for reasoning.

   RUNSUMM1_SETUP,

   // End Stat Line Type
   END_TRAVERSE_TYPES
} TRAVERSE_TYPE;

struct TRAVERSE_INFO
{
   TRAVERSE_TYPE type;
   long          parameters[10];
};

typedef Message<TRAVERSE_INFO> SimntTraverseMsg;

#endif // #ifndef __GUI_UNIT_TEST_MESSAGE_DEFS_H__

/* FORMAT HASH 07131c0ab2917647682058027d669700 */
