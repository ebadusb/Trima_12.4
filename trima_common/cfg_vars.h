/*******************************************************************************
 *
 * Copyright (c) 2000 by Cobe BCT, Inc.  All rights reserved.
 *
 * TITLE:      cfg_vars.h
 *             Individual config variable definitions
 *
 * AUTHOR:     Bruce Dietrich
 *
 *
 ******************************************************************************/

#if !defined( INCLUDE_CFGVARS )
#define INCLUDE_CFGVARS

#include "cfg_ids.h"

class CCfgVarInfo
{

public:


   // obtains max and min values from table
   // This constructor is used once in generating the list.
   CCfgVarInfo(CONFIG_SECTION_NAMES sct,
               CONFIG_DATA_KEYS id,
               const char* name,
               float min,
               float max,
               CONFIG_DATA_TYPE displayType
               );

   // This is used to create instances of specific vars.
   // The remaining info is obtained from the list.
   CCfgVarInfo(CONFIG_DATA_KEYS id);

   CCfgVarInfo(const CCfgVarInfo& var);
   const CCfgVarInfo& operator = (const CCfgVarInfo& var);

   virtual ~CCfgVarInfo();

   // test value against max/min and return true if in range.
   bool Valid (float val) const;

   //  Accessor functions
   const float                Min (void) const { return m_fMin; }
   const float                Max (void) const { return m_fMax; }
   const CONFIG_SECTION_NAMES SectionId (void) const { return m_nSct; }
   const CONFIG_DATA_KEYS     DataId (void) const { return m_nId; }
   const char*                Section (void) const { return m_pStrSct; }
   const char*                Name (void) const { return m_pStrName; }
   const CONFIG_DATA_TYPE     DisplayType () const { return m_displayType; }

   // Set/Get for log errors member
   void      logErrors (const int f) { _LogErrors = f; }
   const int logErrors () const { return _LogErrors; }

protected:
   void Transfer (const CCfgVarInfo& var);
   void Init (int logError = 0);

private:
   CCfgVarInfo();

   CONFIG_SECTION_NAMES m_nSct;
   CONFIG_DATA_KEYS     m_nId;
   float                m_fMin;
   float                m_fMax;
   const char*          m_pStrSct;
   const char*          m_pStrName;
   CONFIG_DATA_TYPE     m_displayType;

   int                  _LogErrors;

};

class CCfgVarList
{

public:
   CCfgVarList(int logErrors = 0);
   virtual ~CCfgVarList();

   const CCfgVarInfo* pVar (CONFIG_DATA_KEYS id);
   const CCfgVarInfo& Var (CONFIG_DATA_KEYS id);

   // return the ith var in the list
   const CCfgVarInfo* pIthVar (int index);
   const CCfgVarInfo& IthVar (int index);

   int NumberVars (void) const;

protected:

private:

   int _LogErrors;

};

// Generated by the config.dat object for each variable
// This connects config var info with its associated
// data in the config.dat structure.

class CCfgValue
{

public:
   CCfgValue();
   CCfgValue(const CCfgVarInfo*, float* pVal);
   CCfgValue(const CCfgValue& val);
   virtual ~CCfgValue();

   const CCfgValue& operator = (const CCfgValue&);

   void Initialize (const CCfgVarInfo*, float* pVal);

   // test value against max and min
   int Valid (void) const;
   // test the parameter value for validity
   int Valid (float v) const;

   // Access to information and current value pointer
   const CCfgVarInfo* cpInfo (void) const;

   // Use these functions to access the value or to
   // set a new value.
   float Value (void) const;
   // this function tests the new value for validity and if
   // OK, it sets the value.
   float Value (float v);

protected:
   void   Init (void);
   void   Transfer (const CCfgValue& val);
   float* pValue (void) const;

private:
   const CCfgVarInfo* m_pVar;
   float*             m_pVal;
};

#endif

/* FORMAT HASH 4a253bb614ff3636e3c0a494f31d8030 */
